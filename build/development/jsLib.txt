
function initCollapsibles() {

	var coll = document.getElementsByClassName("collapsible");
	var i;

	for (i = 0; i < coll.length; i++) {
		coll[i].addEventListener("click", function() {

			this.classList.toggle("active");
			var content = this.nextElementSibling;
							
			if (content.classList.contains("delayed")) {
				if (content.style.maxHeight) {
					content.style.maxHeight = null;
				} else {
					content.style.maxHeight = content.scrollHeight + "px";
				}
			} else {
				if (content.style.display === "block") {
					content.style.display = "none";
				} else {
					content.style.display = "block";
				}
			}


		});
	}
}

function openCollapsibles() {
	var coll = document.getElementsByClassName("collapsible");
	for (i = 0; i < coll.length; i++) {
		const collapsible = coll[i];
		setTimeout(function() {
			collapsible.click();
		}, i * 100);
	}
}
function connector(token, baseUrl, basePath,) {
	
	return {
		token : token ?? null,
		basePath : basePath ?? '/api/session/',
		baseUrl : baseUrl ?? null,
		protocol: 'https',
		
		start(funcToRun) {
			return (typeof funcToRun === 'function') ? Promise.resolve(funcToRun()) : Promise.resolve(funcToRun ?? null);
		},
		
		get(url, queryParams, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'GET', url, queryParams, null, preparationFunction )();
			}
		},
		post(url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'POST', url, queryParams, params, preparationFunction )();
			}
		},
		
		recalculate( xqueries ) {
			let self = this;
			return function(data) {
				return self.post('/api/session/event/editorindicator/reset_indicators/',null,[!!xqueries])(data);
			}
		},

		consoleLog: function(message) {
			let innerMessage = message;
			return function(data) {
				if (message) {
					console.log(message);
				}
				console.log(data);
				return data;
			}
		},
		
		_prepareQueryString: function(queryParams, url) {
			queryParams = queryParams ?? {};
			let queryString = new URLSearchParams(queryParams).toString();
			if ( queryString.length > 0 ) {
				if ( url.indexOf('?')===-1 ) {
					queryString = '?'+ queryString;
				} else {
					queryString = '&'+ queryString;
				}
			}
			return queryString;
		},
		
		_prepareQueryParams: function(queryParams) {
			queryParams = queryParams ?? {};
			if ( !(typeof queryParams === 'object') ) {
				queryParams = {};
			}
			return queryParams;
		},
		
		_prepareParams: function(params) {
			params = params ?? [];
			if (!Array.isArray(params)) {
				params = [params];
			}
			return params;
		},
		
		_call: function (method, url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				params = method.toUpperCase() == 'GET' ? null : self._prepareParams(params);
				queryParams = self._prepareQueryParams(queryParams);
				queryParams['token'] = queryParams['token'] ?? self.token;
				queryParams['f'] = queryParams['f'] ?? 'JSON';
				
				if (typeof preparationFunction == 'function') {
					url = preparationFunction(data, url, queryParams, params) ?? url;
				}
				
				let queryString = self._prepareQueryString(queryParams, url);
				if ( self.basePath && !(url.indexOf('/')==0) ) {
					url = self.basePath + url;
				}
				if (self.baseUrl) {
					url = self.protocol + self.baseUrl + url;
				}
				url = url + queryString;
				
				let promise = Promise.resolve(
					$.ajax({
						url: url,
						method: method.toUpperCase(),
						contentType: 'application/json',
						dataType: 'json',
						data: JSON.stringify(params),
					})
				);
				return promise;
			};
		},

		//To use a single argument which is an array itself, wrap the arguments in an array.
		_chain: function(func, args) {
			if ( typeof args === 'undefined' ) {
				return function() {
					return func();
				}
			}
			if ( Array.isArray(args) ) {
				return function() {
					return func.apply(this, args);
				}
			}
			return function() {
				return func.apply(this, [args]);
			}
		},
	};
}


function createLinks(properties) {
	return { properties: properties };
}

function getLink(links, timeframe) {
	if (links.timeframeLinks == undefined) {
		links.timeframeLinks = [];
	}
	while (links.timeframeLinks.length - 1 < timeframe) {
		links.timeframeLinks.push({
			source: [],
			target: [],
			value: [],
		});
	}
	return links.timeframeLinks[timeframe];
}

function addLink(links, timeframe, from, to, amount) {
	let link = getLink(links, timeframe)
	if (link.source == undefined) {
		link.source = [];
	}
	if (link.target == undefined) {
		link.target = [];
	}
	if (link.value == undefined) {
		link.value = [];
	}
	link.source.push(links.properties.indexOf(from));
	link.target.push(links.properties.indexOf(to));
	link.value.push(amount);
}


function createTimeframeData(timeframes, itemID, properties) {
	let data = {
		itemID: itemID,
		timeframes: timeframes
	};
	for (let i = 0; i < properties.length; i++) {
		data[properties[i]] = [];
		for (let j = 0; j < timeframes; j++) {
			data[properties[i]].push(0);
		}
	}
	return data;
}

/**
 * @param {*} data Data object
 * @param {*} property Property name to set into data
 * @param {*} values Value array to set under property name into data
 * @param {{}} [args={}] Additional args object, supports .relative and .negative with boolean value
 */
function setTimeframeValues(data, property, values, args = {}) {

	for (let i = 0; i < data[property].length && i < values.length; i++) {
		data[property][i] = values[i];
	}

	if (args.relative) {

		for (let i = 0; i < data[property].length; i++) {
			let previous = i == 0 ? 0 : data[property][i - 1];
			data[property][i] -= previous;
		}
	}
	if (args.negative !== undefined) {
		if (args.negative) {
			for (let i = 0; i < data[property].length; i++) {
				data[property][i] = Math.abs(Math.min(0, data[property][i]));
			}
		} else {
			for (let i = 0; i < data[property].length; i++) {
				data[property][i] = Math.max(0, data[property][i]);
			}
		}
	}
}

function setTimeframeValue(data, property, value) {

	for (let i = 0; i < data.dataframes.length; i++) {
		data[property][i] = value;
	}
}

function addFlowValues(data, timeframe, propertyFrom, propertyTo, areaIDFrom, areaIDTo, values, condition = undefined) {
	addFlowValuesWithInner(data, timeframe, propertyFrom, propertyTo, undefined, areaIDFrom, areaIDTo, values, condition);
}

function addFlowValuesWithInner(data, timeframe, propertyFrom, propertyTo, propertyInner, areaIDFrom, areaIDTo, values, condition = undefined) {
	if (data[propertyFrom][timeframe] == undefined) {
		data[propertyFrom][timeframe] = 0;
	}
	if (data[propertyTo][timeframe] == undefined) {
		data[propertyTo][timeframe] = 0;
	}
	if (propertyInner != undefined) {
		if (data[propertyInner][timeframe] == undefined) {
			data[propertyInner][timeframe] = 0;
		}
	}
	for (let i = 0; i < values.length && i < areaIDFrom.length && i < areaIDTo.length; i++) {
		if ((areaIDTo[i] == data.itemID) && (areaIDFrom[i] == data.itemID) && (condition == undefined || condition[i])) {
			if (propertyInner != undefined) {
				if (values[i] > 0) {
					data[propertyInner][timeframe] += values[i];
				} else {
					data[propertyInner][timeframe] -= values[i];
				}
			}
		} else if (areaIDTo[i] == data.itemID && (condition == undefined || condition[i])) {
			if (values[i] > 0) {
				data[propertyFrom][timeframe] += values[i];
			} else {
				data[propertyTo][timeframe] -= values[i];
			}
		} else if (areaIDFrom[i] == data.itemID && (condition == undefined || condition[i])) {
			if (values[i] > 0) {
				data[propertyTo][timeframe] += values[i];
			} else {
				data[propertyFrom][timeframe] -= values[i];
			}
		}
	}
}

function addValuesForTimeframeAndID(data, timeframe, property, idValues, values) {

	if (idValues[i] == data.itemID) {
		if (data[property][timeframe] == undefined) {
			data[property][timeframe] = 0;
		}
		data[property][timeframe] += values[i];
	}

}
function attachHandler(parentElement, eventType, selector, handler) {
	let checkHandler = function(event) {
		event = event || window.event;
		event.target = event.target || event.srcElement;
		
		let foundElement = selector ? event.target.closest(selector) : parentElement;
		if (foundElement) {
			return handler(foundElement, event);
		}
	};

	if (parentElement.addEventListener) {
		parentElement.addEventListener(eventType, checkHandler, false);
	}
}

function popupPanel(element, id, webPath) {

	let popupPanel = document.createElement('div');
	popupPanel.classList.add('popup');
	
	let panelCloser = document.createElement('div');
	panelCloser.classList.add('closer');
	attachHandler(panelCloser, 'click', null, function(){clearPopupPanel(element);});
	
	let panelFrame = document.createElement('iframe');
	panelFrame.classList.add('popupFrame');
	
	popupPanel.appendChild( panelCloser );
	popupPanel.appendChild( panelFrame );
	
	webPath = webPath ?? '/web/panel.html'
	let queryString = 'token=$TOKEN&id='+id;
	let webTarget = webPath + ( webPath.indexOf('?')<0 ? '?' : '&' ) + queryString;
	panelFrame.src = webTarget;
	
	clearPopupPanel(element);
	element.appendChild(popupPanel);
}
function clearPopupPanel(element) {
	let popups = element.getElementsByClassName('popup');
	for ( let i = 0 ; i < popups.length ; i++ ) {
		popups[i].remove();
	}
	return element;
}

function addDownloadHandler(element, fileName, contentFunction) {
	element.addEventListener('click', () => {
		let content = contentFunction();
		let blob = new Blob([content], { type: 'text/plain' });

		// temp link 
		const link = document.createElement('a');
		link.href = URL.createObjectURL(blob);
		link.download = fileName;
		link.click();

		// cleanup
		URL.revokeObjectURL(link.href);
	});
}

function toCSVContent(data, properties, titles, timeframes) {
	
	let csvContent = "data:text/csv;charset=utf-8,";

	for (let i = 0; i < properties.length; i++) {
		csvContent += titles[properties[i]];
		csvContent += i < properties.length - 1 ? "," : "\r\n";
	}
	
	for (let t = 0; t < timeframes; t++) {
		for (let i = 0; i < properties.length; i++) {
			csvContent += data[properties[i]][t];
			csvContent += i < properties.length - 1 ? "," : "\r\n";
		}
	}

	return csvContent;

}

function barPlot(plotDivName, data, timeframe, properties, colors, titles, layout) {


	
	var bardata = [];

	for (let i = 1; i < properties.length; i++) {
		let trace = 		{
				x: [],
				y: [],
				marker: {
					color: []
				},
				name: [], 
				type: 'bar'
			}
			
		let property = properties[i];
		trace.x.push(titles[property]);
		trace.y.push(data[property][timeframe]);
		trace.marker.color.push("rgba(" + colors[property].join(",") + ")");
		trace.name = titles[property];
		bardata.push(trace);
	}

	
	
	var layout = {
			  showlegend: true,	 
			  }; 

	Plotly.newPlot(plotDivName, bardata, layout);
}

function volumeStackedPlot(plotDivName, data, properties, colors, titles, layout, percentual = false) {

	var traces = [];
	for (let i = 1; i < properties.length; i++) {
		series = {};

		series.x = [];
		series.y = [];

		if (titles != null && titles[properties[i]] != null) {
			series.name = titles[properties[i]];
		}
		series.stackgroup = 'one';
		if (percentual) {
			series.groupnorm = 'percent';
		}
		series.fillcolor = "rgba(" + colors[properties[i]].join(",") + ")";

		for (let t = 0; t < data[properties[i]].length; t++) {
			series.x.push(data[properties[0]][t]);
			series.y.push(data[properties[i]][t]);
		}

		traces.push(series);
	}

	if (layout == undefined) {
		layout = {};
	}
	if (layout.title == undefined) {
		layout.title = {
			text: percentual ? 'Percentual Volume Stack' : 'Volume Stack'
		}
	}

	Plotly.newPlot(plotDivName, traces, layout)
}





function sankeyPlot(
  plotDivName,
  links,
  timeframe,
  properties,
  titles,
  layout,
  colors = null,
  positionsX = null,
  positionsY = null
) {

	let link = getLink(links, timeframe);
	
	//labels bepalen
	labels = [];
	for (var i = 0; i < properties.length; i++) {
		labels.push(titles[properties[i]]);
	}
	
	let node = {
			pad: 15,
			thickness: 20,
			line: { color: "black", width: 0.5 },
			label: labels,
			align: "right"
		};
		
	// Voeg optionele kleuren toe
	if (colors !== null) {
		node.color = properties.map(p => colors[p]);
			}
			
			// Voeg optionele posities toe
			  if (positionsX !== null && positionsY !== null) {
			    node.x = properties.map(p => positionsX[p]);
			    node.y = properties.map(p => positionsY[p]);
			  }
	
			// Maak het Sankey data object
				let data = {
					type: "sankey",
					orientation: "h",
					node: node,
					link: link
				};
				


	Plotly.newPlot(plotDivName, [data], layout);
}

function createRadarPlot(plotDivName, labels, values, range, layout) {
	if (Array.isArray(values)) {
		console.error('Array provided for Radarplot rather than mapping. Placing values in mapping under key "Values".');
		values = { 'Values' : values };
	}
	let plotLabels = labels.slice(0, labels.length);
	plotLabels.push(labels[0]);
	
	let plotData = [];
	for ( let i in values ) {
		let plotValues = [];
		for (let l=0;l<labels.length;l++) {
				plotValues[l] = values[i][l] ?? 0;
		}
		plotValues.push(plotValues[0]);
		plotData.push({
			type: 'scatterpolar',
			r: plotValues,
			theta: plotLabels,
			fill: 'toself',
			name: i,
			showlegend: true,
		});
	}

	let plotLayout = JSON.parse(JSON.stringify(layout)); //deep copy
	plotLayout['polar'] ??= {
		radialaxis: {
		  visible: true,
		  direction: 'clockwise',
		  range: [Math.min.apply(null,range),Math.max.apply(null,range)]
		},
		angularaxis: {
		  direction: 'clockwise'
		},
	  };

	Plotly.newPlot(plotDivName, plotData, plotLayout);
	
}

function createLayout() {
	/**
	 * See https://plotly.com/javascript/reference/layout/
	 */

	const layout = {
		title: {
			automargin: undefined,
			font: undefined, /*{color, family, lineposition,shadow, size style, textcase, variant, weight}*/
			pad: undefined,  /*b, l ,r ,t*/
			subtitle: undefined, /*{
						font: undefined, 
						text: undefined		
						x: undefined,
						xanchor: undefined,
						xref: undefined,
						y: undefined, 
						yanchor: undefined, 
						yref: undefined,}*/

			text: undefined,
			x: undefined,
			xanchor: undefined,
			xref: undefined,
			y: undefined,
			yanchor: undefined,
			yref: undefined,
		},
		showLegend: undefined,

		legend: {
			bgcolor: undefined,
			bordercolor: undefined,
			borderwidth: undefined,
			entrywidth: undefined,
			entrywidthmode: undefined,
			font: undefined,
			groupclick: undefined,
			grouptitlefont: undefined,
			indentation: undefined,
			itemclick: undefined,
			itemdoubleclick: undefined,
			itemsizing: undefined,
		}, //etc

		xaxis: {

			title: {

				text: '',

				font: {

				}

			},

		},

		yaxis: {

			title: {

				text: '',

				font: {

				}

			}

		}
	};
	return layout;
}

function createVolumePlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createBarPlotLayout(title) {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	layout.title.text = title;
	return layout;
}

function createSankeyPlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createRadarPlotLayout() {
	const layout = createLayout();
	layout['legend'] ??= {};
	layout['margin'] ??= {};
	
	Object.assign(layout['margin'], {
		t:32,
		b:32,
		l:48,
		r:48,
		pad:0,
		autoexpand:true,
	});
	layout['showlegend'] ??= true;
	layout['autosize'] ??= true;

	return layout;
}


function getRGBAInterpolated(value, min, max, maxColor, baseColor) {

	if (baseColor == undefined) {
		baseColor = [255, 255, 255, 0.0]
	}

	let fraction = (value - min) / (max - min);
	let red = Math.round(maxColor[0] * fraction + (1 - fraction) * baseColor[0]);
	let green = Math.round(maxColor[1] * fraction + (1 - fraction) * baseColor[1]);
	let blue = Math.round(maxColor[2] * fraction + (1 - fraction) * baseColor[2]);
	let alpha = maxColor[3] * fraction;

	return "rgba(" + [red, green, blue, alpha].join(",") + ")";
}


function createTable(divName, data, properties, colors, titles, timeLabels) {

	let table = document.getElementById(divName);
	if (table == undefined) {
		console.log("Element with id: " + divName + " does not exist.");
		return;
	}

	var header = table.createTHead();
	let trow = header.insertRow(-1);
	for (let n = 0; n < properties.length; n++) {
		let cell = trow.insertCell(-1);
		cell.innerHTML = titles[properties[n]];
	}

	var tableBody = table.createTBody();
	for (let r = 0; r < timeframes; r++) {
		var row = tableBody.insertRow(-1);
		for (let n = 0; n < properties.length; n++) {
			let cell = row.insertCell(-1);

			let labelDiv = document.createElement('div');
			let label = document.createElement('label');

			if (n === 1 && timeLabels) {
				// Gebruik de tijdstring uit de array
				label.innerHTML = timeLabels[r];
			} else {
				let value = data[properties[n]][r];
				let min = Math.min.apply(Math, data[properties[n]]);
				let max = Math.max.apply(Math, data[properties[n]]);
				let color = colors[properties[n]];

				// Afronding
				if (n === 0) {
					label.innerHTML = value.toFixed();
				} else {
					label.innerHTML = value.toFixed(2);
				}

				if (min === max || color === undefined) {
					labelDiv.style.backgroundColor = 'transparent';
				} else {
					labelDiv.style.backgroundColor = getRGBAInterpolated(value, min, max, color);
				}
			}

			labelDiv.appendChild(label);
			cell.appendChild(labelDiv);
		}
	}
}


function setupTimeframeSlider(timeframeSlider, timeframe, timeframes, onInput){
	timeframeSlider.max = timeframes - 1;
	timeframeSlider.value = timeframe;
	if (timeframeSlider.parentElement != null) {
		timeframeSlider.parentElement.style.setProperty('--max', timeframeSlider.max);
		timeframeSlider.parentElement.style.setProperty('--min', 0);
		timeframeSlider.parentElement.style.setProperty('--step', 1); /*Compute*/
		timeframeSlider.parentElement.style.setProperty('--tickEvery', 1);
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
		

	}
	timeframeSlider.oninput = function() {
		onInput();
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
	};
}

