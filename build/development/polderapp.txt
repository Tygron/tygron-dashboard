
	<style>
		@charset "UTF-8";

:root {
	--tygron-white: rgba(245, 245, 245, 1.0);
	--tygron-blue: rgb(10, 173, 207);
}

html, body {
	padding: 0px;
	background-color: white;
}

/* Style the button that is used to open and close the collapsible content */
.collapsible {
	background-color: #eee;
	color: #444;
	cursor: pointer;
	padding: 18px;
	width: 100%;
	border: none;
	text-align: left;
	outline: none;
	font-size: 15px;
}

.active, .collapsible {
	font-weight: bold;
	font-size: 1.5em;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.active, .collapsible:hover {
	background-color: cornflowerblue;
	color: white;
}

/* Style the collapsible content. Note: hidden by default */
.content {
	padding: 0 0.25em;
	background-color: white;
	overflow: hidden;
}

.content.direct {
	padding: 0 0em;
}

.content .delayed {
	max-height: 0;
	transition: max-height 0.2s ease-out;
}

.collapsible:after {
	content: '\02795';
	/* Unicode character for "plus" sign (+) */
	font-size: 13px;
	color: white;
	float: right;
	margin-left: 5px;
}

.active:after {
	content: "\2796";
	/* Unicode character for "minus" sign (-) */
}

.datatable thead {
	font-weight: bold;
}

.datatable {
	height: 1px;
	border-collapse: collapse;
	width: 100%;
	table-layout: auto;
	font-family: Arial;
	font-size: 0.9em;
}

.datatable tr {
	/*border-bottom: 1px solid black;*/
	height: 100%;
}

.datatable tr:nth-child(even) {
	background-color: rgb(240, 240, 240)
}

.datatable td {
	height: 100%;
}

.datatable td>div {
	margin: 0.25em;
	padding: 0.25em 0.25em 0.25em 0.25em;
	position: relative;
	border-radius: 0.5em;
}

.timeframe-slider {
  --primaryColor: #0366D6;
  --value-active-color: white;
  --value-background: var(--primaryColor);
  --value-font: 700 12px/1 Arial;
  --progress-color: #EEE;
  --progress-shadow: 2px 2px 4px rgba(0,0,0, .1) inset;
  --fill-color: var(--primaryColor);
  --thumb-size: 16px;
  --track-height: calc(var(--thumb-size)/2);
  --thumb-shadow: 0 0 3px rgba(0,0,0,.2);
  --ticks-thickness: 1px;
  --ticks-height: 5px;
  --ticks-color: silver;
  --step: 1;
  --ticks-count: (var(--max) - var(--min)) / var(--step);
  --maxTicksAllowed: 30;
  --too-many-ticks: Min(1, Max(var(--ticks-count) - var(--maxTicksAllowed), 0));
  --x-step: Max( var(--step), var(--too-many-ticks) * (var(--max) - var(--min)) ); /* manipulate the number of steps if too many ticks exist, so there would only be 2*/
  --tickInterval: 100/((var(--max) - var(--min)) / var(--step)) * var(--tickEvery, 1);
  --tickIntervalPerc: calc((100% - var(--thumb-size))/( (var(--max) - var(--min)) / var(--x-step) ) * var(--tickEvery, 1));
  --completed: calc((var(--value) - var(--min) ) / (var(--max) - var(--min)) * 100);
  
  @mixin thumb{
    appearance: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background: var(--thumb-color, white);
    border: 1px solid silver;
    box-shadow: var(--inner-shadow, 0 0), var(--thumb-shadow);
  }
  
  display: inline-block;
  height: var(--thumb-size);
  margin: calc((var(--thumb-size) - var(--track-height)) * -.25) var(--thumb-size) 0;
  background: linear-gradient(to right, var(--ticks-color) var(--ticks-thickness), transparent 1px) repeat-x;
  background-size: var(--tickIntervalPerc) var(--ticks-height);
  background-position: calc(var(--thumb-size)/2) bottom;
  padding-bottom: var(--ticks-height);
  position: relative;

  &::before, 
  &::after {
    font: 12px Arial;
    content: counter(x);
    position: absolute;
    bottom: -2.5ch;
  }
  
  &::before {
    counter-reset: x var(--min);
    left: 0;
  }
  
  &::after {
    counter-reset: x var(--max);
    right: 0;
  }
  
  &__progress {
    position: absolute;
    left: 0;
    top: calc(50% - var(--ticks-height)/2);
    transform: translateY(-50%);
    width: 100%;
    height: calc(var(--track-height));
    pointer-events: none;
    z-index: -1;
    box-shadow: var(--progress-shadow); 
    border-radius: 20px;
    background: var(--fill-color, white);

    &::before {
      content: '';
      display: block;
      margin-left: auto;
      margin-right: -.5px;
      width: calc(100% - var(--completed) * 1%);
      height: 100%;
      background: var(--progress-color, #EEE);
      box-shadow: inherit;
      border-radius: 0 20px 20px 0;
    }
  }
  
  & > input {
    width: 100%;
    height: var(--thumb-size);
   /* margin: 0 calc(var(--thumb-size)/-2);*/
    margin: 0;
    cursor: -webkit-grab;
    cursor: grab;
    outline: none;
    background: none;
    
    &::-webkit-slider-thumb { 
      @include thumb;
    }
    
    &::-moz-slider-thumb { 
      @include thumb;
    }
    
    &::-ms-thumb { 
      @include thumb;
    }
    
    &:active {
      cursor: grabbing;
      --thumb-color: var(--fill-color);
      --inner-shadow: 0 0 0 calc(var(--thumb-size)/4) inset white;
      + output { transition: 0s; }
    }
    
    &:hover + output {
      background: var(--value-background);
      color: var(--value-active-color);
      transform: translate(var(--x-offset), 0);
      box-shadow: 0 0 0 3px var(--value-background);
    }
  }

  & > output {
    --x-offset: calc(var(--completed) * -1%);
    pointer-events: none;
    position: absolute;
    background: transparent;
    border-radius: 10px;
    padding: 0 4px;
    top: -3ch; /* calc(Max(var(--thumb-size), var(--track-height)) * -1);*/
    left: calc(((var(--value) - var(--min))/(var(--max) - var(--min))) * 100%);
    transform: translate(var(--x-offset), 6px);
    transition: all .12s ease-out, left 0s, top 0s;
  
    &::after {
      content: var(--text-value);
      font: var(--value-font);
    }
  }
}
/*Polderapp override css here*/
.column {
	
	height: 100%;
	max-height: 43vh;
	overflow-y: scroll;
	border: 1px solid grey;
	border-radius: 20px;
	box-shadow: 2px 2px 10px #c1c1c1;
	font-family: Arial;
	padding:30px;
	margin:10px;
}


.grid {
	display: grid;
	grid-template-columns: 50% auto;
	/*grid-template-rows: 45% auto;*/
	width: 100%;
	height: 100%;
	gap: 25px;
	
}

.flex-container {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.slider-background{
	margin:1em;
	width:95%;
	height:15px;
}




	</style>
	<div class=".flex-container ">
		<div class="column">
			<div class="timeframe-slider range--ticks slider-background"
				style='--step: 1; --min: 0; --max: 1; --value: 1; --text-value: "1"; --primaryColor: red; --fill-color: unset; --value-background: unset; --value-active-color: unset;'>
				<input id="barSlider" class="timeframe-slider" type="range" min="0" max="1" step="1" value="1"
					oninput="this.parentNode.style.setProperty('--value',this.value); this.parentNode.style.setProperty('--text-value', JSON.stringify(this.value))">
				<output></output>
			</div>
			<div id="balancePlot" />
		</div>
	</div>
	<div class="column">
		<label>Download: </label><button id="balanceCSVButton">CSV</button>
		<table id="waterBalanceTable" class="datatable"></table>
	</div>

	<div class="column">
		<div class="timeframe-slider range--ticks slider-background"
			style='--step: 1; --min: 0; --max: 1; --value: 1; --text-value: "1"; --primaryColor: red; --fill-color: unset; --value-background: unset; --value-active-color: unset;'>
			<input id="sankeySlider" class="timeframe-slider" type="range" min="0" max="1" step="1" value="1"
				oninput="this.parentNode.style.setProperty('--value',this.value); this.parentNode.style.setProperty('--text-value', JSON.stringify(this.value))">
			<output></output>
		</div>
		<div id="sankeyPlot"></div>
	</div>
	<div class="column">
		<label>Download: </label><button id="flowCSVButton">CSV</button>
		<table id="waterFlowTable" class="datatable"></table>
	</div>
	</div>
	<script>
		
function initCollapsibles() {

	var coll = document.getElementsByClassName("collapsible");
	var i;

	for (i = 0; i < coll.length; i++) {
		coll[i].addEventListener("click", function() {

			this.classList.toggle("active");
			var content = this.nextElementSibling;
							
			if (content.classList.contains("delayed")) {
				if (content.style.maxHeight) {
					content.style.maxHeight = null;
				} else {
					content.style.maxHeight = content.scrollHeight + "px";
				}
			} else {
				if (content.style.display === "block") {
					content.style.display = "none";
				} else {
					content.style.display = "block";
				}
			}


		});
	}
}

function openCollapsibles() {
	var coll = document.getElementsByClassName("collapsible");
	for (i = 0; i < coll.length; i++) {
		const collapsible = coll[i];
		setTimeout(function() {
			collapsible.click();
		}, i * 100);
	}
}
function connector(token, baseUrl, basePath,) {
	
	return {
		token : token ?? null,
		basePath : basePath ?? '/api/session/',
		baseUrl : baseUrl ?? null,
		protocol: 'https',
		
		start(funcToRun) {
			return (typeof funcToRun === 'function') ? Promise.resolve(funcToRun()) : Promise.resolve(funcToRun ?? null);
		},
		
		get(url, queryParams, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'GET', url, queryParams, null, preparationFunction )();
			}
		},
		post(url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'POST', url, queryParams, params, preparationFunction )();
			}
		},
		
		recalculate( xqueries ) {
			let self = this;
			return function(data) {
				return self.post('/api/session/event/editorindicator/reset_indicators/',null,[!!xqueries])(data);
			}
		},

		consoleLog: function(message) {
			let innerMessage = message;
			return function(data) {
				if (message) {
					console.log(message);
				}
				console.log(data);
				return data;
			}
		},
		
		_prepareQueryString: function(queryParams, url) {
			queryParams = queryParams ?? {};
			let queryString = new URLSearchParams(queryParams).toString();
			if ( queryString.length > 0 ) {
				if ( url.indexOf('?')===-1 ) {
					queryString = '?'+ queryString;
				} else {
					queryString = '&'+ queryString;
				}
			}
			return queryString;
		},
		
		_prepareQueryParams: function(queryParams) {
			queryParams = queryParams ?? {};
			if ( !(typeof queryParams === 'object') ) {
				queryParams = {};
			}
			return queryParams;
		},
		
		_prepareParams: function(params) {
			params = params ?? [];
			if (!Array.isArray(params)) {
				params = [params];
			}
			return params;
		},
		
		_call: function (method, url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				params = method.toUpperCase() == 'GET' ? null : self._prepareParams(params);
				queryParams = self._prepareQueryParams(queryParams);
				queryParams['token'] = queryParams['token'] ?? self.token;
				queryParams['f'] = queryParams['f'] ?? 'JSON';
				
				if (typeof preparationFunction == 'function') {
					url = preparationFunction(data, url, queryParams, params) ?? url;
				}
				
				let queryString = self._prepareQueryString(queryParams, url);
				if ( self.basePath && !(url.indexOf('/')==0) ) {
					url = self.basePath + url;
				}
				if (self.baseUrl) {
					url = self.protocol + self.baseUrl + url;
				}
				url = url + queryString;
				
				let promise = Promise.resolve(
					$.ajax({
						url: url,
						method: method.toUpperCase(),
						contentType: 'application/json',
						dataType: 'json',
						data: JSON.stringify(params),
					})
				);
				return promise;
			};
		},

		//To use a single argument which is an array itself, wrap the arguments in an array.
		_chain: function(func, args) {
			if ( typeof args === 'undefined' ) {
				return function() {
					return func();
				}
			}
			if ( Array.isArray(args) ) {
				return function() {
					return func.apply(this, args);
				}
			}
			return function() {
				return func.apply(this, [args]);
			}
		},
	};
}


function createLinks(properties) {
	return { properties: properties };
}

function getLink(links, timeframe) {
	if (links.timeframeLinks == undefined) {
		links.timeframeLinks = [];
	}
	while (links.timeframeLinks.length - 1 < timeframe) {
		links.timeframeLinks.push({
			source: [],
			target: [],
			value: [],
		});
	}
	return links.timeframeLinks[timeframe];
}

function addLink(links, timeframe, from, to, amount) {
	let link = getLink(links, timeframe)
	if (link.source == undefined) {
		link.source = [];
	}
	if (link.target == undefined) {
		link.target = [];
	}
	if (link.value == undefined) {
		link.value = [];
	}
	link.source.push(links.properties.indexOf(from));
	link.target.push(links.properties.indexOf(to));
	link.value.push(amount);
}


function createTimeframeData(timeframes, itemID, properties) {
	let data = {
		itemID: itemID,
		timeframes: timeframes
	};
	for (let i = 0; i < properties.length; i++) {
		data[properties[i]] = [];
		for (let j = 0; j < timeframes; j++) {
			data[properties[i]].push(0);
		}
	}
	return data;
}

/**
 * @param {*} data Data object
 * @param {*} property Property name to set into data
 * @param {*} values Value array to set under property name into data
 * @param {{}} [args={}] Additional args object, supports .relative and .negative with boolean value
 */
function setTimeframeValues(data, property, values, args={}) {

	for (let i = 0; i < data[property].length && i < values.length; i++) {
		data[property][i] = values[i];
	}

	if (args.relative) {

		for (let i = 0; i < data[property].length; i++) {
			let previous = i == 0 ? 0 : data[property][i - 1];
			data[property][i] -= previous;
		}
	}
	if (args.negative!== undefined) {
		if (args.negative) {
			for (let i = 0; i < data[property].length; i++) {
				data[property][i] = Math.abs(Math.min(0, data[property][i]));
			}
		} else {
			for (let i = 0; i < data[property].length ; i++) {
				data[property][i] = Math.max(0, data[property][i]);
			}
		}
	}
}

function setTimeframeValue(data, property, value) {

	for (let i = 0; i < data.dataframes.length; i++) {
		data[property][i] = value;
	}
}

function addFlowValues(data, timeframe, propertyFrom, propertyTo, areaIDFrom, areaIDTo, values, condition = undefined) {
	if (data[propertyFrom][timeframe] == undefined) {
		data[propertyFrom][timeframe] = 0;
	}
	if (data[propertyTo][timeframe] == undefined) {
		data[propertyTo][timeframe] = 0;
	}

	for (let i = 0; i < values.length && i < areaIDFrom.length && i < areaIDTo.length; i++) {
		if (areaIDFrom[i] == data.itemID && (condition == undefined || condition[i])) {
			if (values[i] > 0) {
				data[propertyFrom][timeframe] += values[i];
			} else {
				data[propertyTo][timeframe] -= values[i];
			}
		}
		if (areaIDTo[i] == data.itemID  && (condition == undefined || condition[i])) {
			if (values[i] > 0) {
				data[propertyTo][timeframe] += values[i];
			} else {
				data[propertyFrom][timeframe] -= values[i];
			}
		}
	}
}

function addValuesForTimeframeAndID(data, timeframe, property, idValues, values) {

	if (idValues[i] == data.itemID) {
		if (data[property][timeframe] == undefined) {
			data[property][timeframe] = 0;
		}
		data[property][timeframe] += values[i];
	}

}
function attachHandler(parentElement, eventType, selector, handler) {
	let checkHandler = function(event) {
		event = event || window.event;
		event.target = event.target || event.srcElement;
		
		let foundElement = selector ? event.target.closest(selector) : parentElement;
		if (foundElement) {
			return handler(foundElement, event);
		}
	};

	if (parentElement.addEventListener) {
		parentElement.addEventListener(eventType, checkHandler, false);
	}
}

function addDownloadHandler(element, fileName, contentFunction) {
	element.addEventListener('click', () => {
		let content = contentFunction();
		let blob = new Blob([content], { type: 'text/plain' });

		// temp link 
		const link = document.createElement('a');
		link.href = URL.createObjectURL(blob);
		link.download = fileName;
		link.click();

		// cleanup
		URL.revokeObjectURL(link.href);
	});
}

function toCSVContent(data, properties, titles, timeframes) {
	
	let csvContent = "data:text/csv;charset=utf-8,";

	for (let i = 0; i < properties.length; i++) {
		csvContent += titles[properties[i]];
		csvContent += i < properties.length - 1 ? "," : "\r\n";
	}
	
	for (let t = 0; t < timeframes; t++) {
		for (let i = 0; i < properties.length; i++) {
			csvContent += data[properties[i]][t];
			csvContent += i < properties.length - 1 ? "," : "\r\n";
		}
	}

	return csvContent;

}

function barPlot(plotDivName, data, timeframe, properties, colors, titles, layout) {


	
	var bardata = [];

	for (let i = 1; i < properties.length; i++) {
		let trace = 		{
				x: [],
				y: [],
				marker: {
					color: []
				},
				name: [], 
				type: 'bar'
			}
			
		let property = properties[i];
		trace.x.push(titles[property]);
		trace.y.push(data[property][timeframe]);
		trace.marker.color.push("rgba(" + colors[property].join(",") + ")");
		trace.name = titles[property];
		bardata.push(trace);
	}

	
	
	var layout = {
			  showlegend: true,	 
			  }; 

	Plotly.newPlot(plotDivName, bardata, layout);
}

function volumeStackedPlot(plotDivName, data, properties, colors, titles, layout, percentual = false) {

	var traces = [];
	for (let i = 1; i < properties.length; i++) {
		series = {};

		series.x = [];
		series.y = [];

		if (titles != null && titles[properties[i]] != null) {
			series.name = titles[properties[i]];
		}
		series.stackgroup = 'one';
		if (percentual) {
			series.groupnorm = 'percent';
		}
		series.fillcolor = "rgba(" + colors[properties[i]].join(",") + ")";

		for (let t = 0; t < data[properties[i]].length; t++) {
			series.x.push(data[properties[0]][t]);
			series.y.push(data[properties[i]][t]);
		}

		traces.push(series);
	}

	if (layout == undefined) {
		layout = {};
	}
	if (layout.title == undefined) {
		layout.title = {
			text: percentual ? 'Percentual Volume Stack' : 'Volume Stack'
		}
	}

	Plotly.newPlot(plotDivName, traces, layout)
}





function sankeyPlot(plotDivName, links, timeframe, properties, colors, titles, layout) {

	let link = getLink(links, timeframe);
	labels = [];
	for (var i = 0; i < properties.length; i++) {
		labels.push(titles[properties[i]]);
	}
	let data = {

		type: "sankey",
		orientation: "h",

		node: {
			label: labels,
			align: "right",
		},

		link: link
	};



	Plotly.newPlot(plotDivName, [data], layout);
}

function createRadarPlot(plotDivName, labels, values, range) {
	if (Array.isArray(values)) {
		values = { 'Values' : values };
	}
	let plotLabels = labels.slice(0, labels.length);
	plotLabels.push(labels[0]);
	
	let plotData = [];
	for ( let i in values ) {
		let plotValues = [];
		for (let l=0;l<labels.length;l++) {
				plotValues[l] = values[i][l] ?? 0;
		}
		plotValues.push(plotValues[0]);
		plotData.push({
			type: 'scatterpolar',
			r: plotValues,
			theta: plotLabels,
			fill: 'toself',
			name: i,
		});
	}
	
	let data = plotData;

	layout = {
	  legend: {
		yanchor:'top',
		xanchor:'left',
		y:-20,
		x:-1,
	  },
	  margin: {
		t:150,
		b:150,
		l:150,
		r:150,
		pad:100,
		autoexpand:true,
	  },
	  autosize: true,
	  polar: {
		radialaxis: {
		  visible: true,
		  direction: 'clockwise',
		  range: [Math.min.apply(null,range),Math.max.apply(null,range)]
		},
		angularaxis: {
		  direction: 'clockwise'
		},
	  },
	  showlegend: true
	}

	Plotly.newPlot(plotDivName, data, layout);
	
}

function createLayout() {
	/**
	 * See https://plotly.com/javascript/reference/layout/
	 */

	const layout = {
		title: {
			automargin: undefined,
			font: undefined, /*{color, family, lineposition,shadow, size style, textcase, variant, weight}*/
			pad: undefined,  /*b, l ,r ,t*/
			subtitle: undefined, /*{
						font: undefined, 
						text: undefined		
						x: undefined,
						xanchor: undefined,
						xref: undefined,
						y: undefined, 
						yanchor: undefined, 
						yref: undefined,}*/

			text: undefined,
			x: undefined,
			xanchor: undefined,
			xref: undefined,
			y: undefined,
			yanchor: undefined,
			yref: undefined,
		},
		showLegend: undefined,

		legend: {
			bgcolor: undefined,
			bordercolor: undefined,
			borderwidth: undefined,
			entrywidth: undefined,
			entrywidthmode: undefined,
			font: undefined,
			groupclick: undefined,
			grouptitlefont: undefined,
			indentation: undefined,
			itemclick: undefined,
			itemdoubleclick: undefined,
			itemsizing: undefined,
		}, //etc

		xaxis: {

			title: {

				text: '',

				font: {

				}

			},

		},

		yaxis: {

			title: {

				text: '',

				font: {

				}

			}

		}
	};
	return layout;
}

function createVolumePlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createBarPlotLayout(title) {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	layout.title.text = title;
	return layout;
}

function createSankeyPlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createRadarPlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}


function getRGBAInterpolated(value, min, max, maxColor, baseColor) {

	if (baseColor == undefined) {
		baseColor = [255, 255, 255, 0.0]
	}

	let fraction = (value - min) / (max - min);
	let red = Math.round(maxColor[0] * fraction + (1 - fraction) * baseColor[0]);
	let green = Math.round(maxColor[1] * fraction + (1 - fraction) * baseColor[1]);
	let blue = Math.round(maxColor[2] * fraction + (1 - fraction) * baseColor[2]);
	let alpha = maxColor[3] * fraction;

	return "rgba(" + [red, green, blue, alpha].join(",") + ")";
}


function createTable(divName, data, properties, colors, titles, timeLabels) {

	let table = document.getElementById(divName);
	if (table == undefined) {
		console.log("Element with id: " + divName + " does not exist.");
		return;
	}

	var header = table.createTHead();
	let trow = header.insertRow(-1);
	for (let n = 0; n < properties.length; n++) {
		let cell = trow.insertCell(-1);
		cell.innerHTML = titles[properties[n]];
	}

	var tableBody = table.createTBody();
	for (let r = 0; r < timeframes; r++) {
		var row = tableBody.insertRow(-1);
		for (let n = 0; n < properties.length; n++) {
			let cell = row.insertCell(-1);

			let labelDiv = document.createElement('div');
			let label = document.createElement('label');

			if (n === 1 && timeLabels) {
				// Gebruik de tijdstring uit de array
				label.innerHTML = timeLabels[r];
			} else {
				let value = data[properties[n]][r];
				let min = Math.min.apply(Math, data[properties[n]]);
				let max = Math.max.apply(Math, data[properties[n]]);
				let color = colors[properties[n]];

				// Afronding
				if (n === 0) {
					label.innerHTML = value.toFixed();
				} else {
					label.innerHTML = value.toFixed(2);
				}

				if (min === max || color === undefined) {
					labelDiv.style.backgroundColor = 'transparent';
				} else {
					labelDiv.style.backgroundColor = getRGBAInterpolated(value, min, max, color);
				}
			}

			labelDiv.appendChild(label);
			cell.appendChild(labelDiv);
		}
	}
}


function setupTimeframeSlider(timeframeSlider, timeframe, timeframes, onInput){
	timeframeSlider.max = timeframes - 1;
	timeframeSlider.value = timeframe;
	if (timeframeSlider.parentElement != null) {
		timeframeSlider.parentElement.style.setProperty('--max', timeframeSlider.max);
		timeframeSlider.parentElement.style.setProperty('--min', 0);
		timeframeSlider.parentElement.style.setProperty('--step', 1); /*Compute*/
		timeframeSlider.parentElement.style.setProperty('--tickEvery', 1);
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
		

	}
	timeframeSlider.oninput = function() {
		onInput();
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
	};
}







const M3TOTAL = 'm3Total';
const M3LAND = 'm3Land';
const M3WATER = 'm3Water';
const M3SEWER = 'm3Sewer';
const M3STORAGE = 'm3Storage';
const M3GROUND = 'm3Ground';
const TIMEFRAMES = 'timeframes';
const TIMEFRAMETIMES = 'timeframetimes';

const timeframes = $SELECT_ATTRIBUTE_WHERE_GRIDTYPE_IS_RAINFALL_AND_NAME_IS_TIMEFRAMES;
var timeframe = timeframes - 1;

const data = {};
data[TIMEFRAMETIMES] = [$SELECT_NAME_WHERE_TIMEFRAME_IS_X_AND_GRIDTYPE_IS_RAINFALL];
data[M3TOTAL] = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_SURFACE_LAST_VALUE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
data[M3WATER] = [$SELECT_GRIDVOLUME_WHERE_GRID_WITH_ATTRIBUTE_IS_M3WATER_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
data[M3GROUND] = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_GROUND_LAST_STORAGE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
data[M3STORAGE] = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_BUILDING_LAST_STORAGE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
data[M3SEWER] = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_SEWER_LAST_VALUE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
data[M3LAND] = [];
data[TIMEFRAMES] = [];

for (var i = 0; i < data[M3TOTAL].length && i < data[M3WATER].length; i++)
	data[M3LAND].push(data[M3TOTAL][i] - data[M3WATER][i]);

for (var i = 0; i < timeframes; i++)
	data[TIMEFRAMES].push(i);

let timeLabels = data[TIMEFRAMETIMES];
const properties = [TIMEFRAMES, TIMEFRAMETIMES, M3LAND, M3WATER, M3GROUND, M3SEWER, M3STORAGE];
const plotProperties = [TIMEFRAMES, M3LAND, M3WATER, M3GROUND, M3SEWER, M3STORAGE];


const titles = {};
titles[TIMEFRAMES] = "Timeframes";
titles[TIMEFRAMETIMES] = "Tijdstap";
titles[M3LAND] = "Water op Maaiveld [m3]";
titles[M3WATER] = "Oppervlaktewater [m3]";
titles[M3GROUND] = "Grondwater [m3]";
titles[M3STORAGE] = "Waterbergende voorzieningen [m3]";
titles[M3SEWER] = "Rioolwater [m3]";

const colors = {};
colors[M3WATER] = [10, 10, 218, 0.5];
colors[M3LAND] = [10, 218, 10, 0.5];
colors[M3GROUND] = [165, 42, 42, 0.5];
colors[M3STORAGE] = [218, 10, 10, 0.5];
colors[M3SEWER] = [128, 128, 128, 0.5];

createTable("waterBalanceTable", data, properties, colors, titles, timeLabels);

const barPlotLayout = createBarPlotLayout();
barPlotLayout.title.text = "Berging per component";
barPlotLayout.yaxis.title.text = "Volume [m3]";
barPlotLayout.xaxis.title.text = "Component";

const barSlider = document.getElementById("barSlider");
barPlot("balancePlot", data, barSlider.value, plotProperties, colors, titles, barPlotLayout);
setupTimeframeSlider(barSlider, timeframe, timeframes, function() {
	barPlot("balancePlot", data, barSlider.value, plotProperties, colors, titles, barPlotLayout);
});

const MODEL_IN = 'MODEL_IN';
const MODEL_OUT = 'MODEL_OUT';
const RAINM3 = 'RAINM3';
const RAINM3LAND = 'RAINM3LAND';
const RAINM3WATER = 'RAINM3WATER';
const RAINM3STORAGE = 'RAINM3STORAGE';

const LANDSEWER = 'LANDSEWER';


const EVAPOTRANSPIRATION = 'EVAPOTRANSPIRATION';
const GROUND_TRANSPIRATION = 'GROUND_TRANSPIRATION';
const SURFACE_EVAPORATIONLAND = 'SURFACE_EVAPORATIONLAND';
const SURFACE_EVAPORATIONWATER = 'SURFACE_EVAPORATIONWATER';

const SEWER_IN = 'SEWER_IN';
const SEWER_OVERFLOW_OUT = 'SEWER_OVERFLOW_OUT';

const INLET_SURFACE = 'INLET_SURFACE';
const INLET_GROUND = 'INLET_GROUND';
const OUTLET_SURFACE = "OUTLET_SURFACE";
const OUTLET_GROUND = "OUTLET_GROUND";
const BOTTOM_FLOW_IN = "BOTTOM_FLOW_IN";
const BOTTOM_FLOW_OUT = "BOTTOM_FLOW_OUT";
const CULVERT_IN = "CULVERT_IN";
const CULVERT_OUT = "CULVERT_OUT";
const PUMP_IN = "PUMP_IN";
const PUMP_OUT = "PUMP_OUT";
const WEIR_IN = "WEIR_IN";
const WEIR_OUT = "WEIR_OUT";
const BREACH_IN = "BREACH_IN";
const BREACH_OUT = "BREACH_OUT";

const flowTitles = {};
flowTitles[TIMEFRAMES] = "Timeframes";

flowTitles[RAINM3] = 'Neerslag [m³/tijdstap]';
flowTitles[RAINM3LAND] = 'Neerslag op land [m³/tijdstap]';
flowTitles[RAINM3WATER] = 'Neerslag op water [m³/tijdstap]';
flowTitles[RAINM3STORAGE] = 'Neerslag op bergende voorzieningen [m³/tijdstap]';
flowTitles[LANDSEWER] = 'Toestroom naar riool [m³/tijdstap]';

flowTitles[EVAPOTRANSPIRATION] = 'Verdamping [m³/tijdstap]';
flowTitles[GROUND_TRANSPIRATION] = 'Plant transpiratie [m³/tijdstap]';
flowTitles[SURFACE_EVAPORATIONLAND] = 'Verdamping Land [m³/tijdstap]';
flowTitles[SURFACE_EVAPORATIONWATER] = 'Verdamping Water [m³/tijdstap]';


flowTitles[SEWER_IN] = 'POCRiool [m³/tijdstap]';

flowTitles[SEWER_OVERFLOW_OUT] = 'Riooloverstort [m³/tijdstap]';

flowTitles[INLET_SURFACE] = 'Inlaat op maaiveld [m³/tijdstap]';
flowTitles[INLET_GROUND] = 'Inlaat in de grond [m³/tijdstap]';
flowTitles[OUTLET_SURFACE] = "Uitlaat op maaiveld [m³/tijdstap]";
flowTitles[OUTLET_GROUND] = "Uitlaat uit de grond [m³/tijdstap]";
flowTitles[BOTTOM_FLOW_IN] = "Kwel [m³/tijdstap]";
flowTitles[BOTTOM_FLOW_OUT] = "Uitzijging [m³/tijdstap]";
flowTitles[CULVERT_IN] = "Duiker in [m³/tijdstap]";
flowTitles[CULVERT_OUT] = "Duiker uit [m³/tijdstap]";
flowTitles[PUMP_IN] = "Pomp in [m³/tijdstap]";
flowTitles[PUMP_OUT] = "Pomp uit [m³/tijdstap]";
flowTitles[WEIR_IN] = "Stuw in [m³/tijdstap]";
flowTitles[WEIR_OUT] = "Stuw uit [m³/tijdstap]";
flowTitles[MODEL_IN] = "Interessegebied in [m³/tijdstap]";
flowTitles[MODEL_OUT] = "Interessegebied uit [m³/tijdstap]";
flowTitles[M3GROUND] = "Bodem [m³]";
flowTitles[M3LAND] = "Maaiveld [m³]";
flowTitles[M3WATER] = "Oppervlaktewater [m³]";
flowTitles[M3STORAGE] = "Berging gebouwen [m³]";
flowTitles[M3TOTAL] = "Surface [m³]";
flowTitles[M3SEWER] = "Berging riolering[m³]";


const flowColors = {};
// Model In/Out
flowColors[MODEL_IN] = [44, 160, 44, 0.5];           // Groen
flowColors[MODEL_OUT] = [214, 39, 40, 0.5];          // Rood

//Natuurlijlke processen
flowColors[RAINM3] = [31, 119, 180, 0.5];          // Donkerblauw - Neerslag
flowColors[RAINM3LAND] = [31, 119, 180, 0.5];          // Donkerblauw - Neerslag
flowColors[RAINM3WATER] = [31, 119, 180, 0.5];  
flowColors[RAINM3STORAGE] = [31, 119, 180, 0.5];  

flowColors[LANDSEWER] = [31, 119, 180, 0.5];  



flowColors[EVAPOTRANSPIRATION] = [31, 119, 180, 0.5];
flowColors[GROUND_TRANSPIRATION] = [31, 119, 180, 0.5];
flowColors[SURFACE_EVAPORATIONLAND] = [31, 119, 180, 0.5];
flowColors[SURFACE_EVAPORATIONWATER] = [31, 119, 180, 0.5];


flowColors[BOTTOM_FLOW_IN] = [31, 119, 180, 0.5];   
flowColors[BOTTOM_FLOW_OUT] = [31, 119, 180, 0.5]; 

// Berging - Lichtblauw
flowColors[M3LAND] = [196, 196, 220, 0.5];         // Berging Maaiveld
flowColors[M3WATER] = [196, 196, 220, 0.5];        // Oppervlaktewater
flowColors[M3GROUND] = [196, 196, 220, 0.5];       // Bodem
flowColors[M3STORAGE] = [196, 196, 220, 0.5];      // Gebouwen
flowColors[M3TOTAL] = [196, 196, 220, 0.5];        // Totale berging (optioneel)

// Kunstwerken - Oranje
flowColors[INLET_SURFACE] = [255, 127, 14, 0.5];
flowColors[INLET_GROUND] = [255, 127, 14, 0.5];
flowColors[OUTLET_SURFACE] = [255, 127, 14, 0.5];
flowColors[OUTLET_GROUND] = [255, 127, 14, 0.5];
flowColors[PUMP_IN] = [255, 127, 14, 0.5];
flowColors[PUMP_OUT] = [255, 127, 14, 0.5];
flowColors[SEWER_OVERFLOW_OUT] = [255, 127, 14, 0.5]; // Overstort
flowColors[SEWER_IN] = [255, 127, 14, 0.5];           // POC
flowColors[CULVERT_IN] = [255, 127, 14, 0.5];
flowColors[CULVERT_OUT] = [255, 127, 14, 0.5];
flowColors[WEIR_IN] = [255, 127, 14, 0.5];
flowColors[WEIR_OUT] = [255, 127, 14, 0.5];




const flowProperties = [TIMEFRAMES, MODEL_IN, MODEL_OUT, M3LAND, M3WATER, M3GROUND, M3STORAGE, M3SEWER, RAINM3, RAINM3LAND, RAINM3WATER, RAINM3STORAGE,GROUND_TRANSPIRATION, EVAPOTRANSPIRATION, SURFACE_EVAPORATIONLAND, SURFACE_EVAPORATIONWATER, BOTTOM_FLOW_IN, BOTTOM_FLOW_OUT,LANDSEWER,  SEWER_IN, SEWER_OVERFLOW_OUT,  CULVERT_IN, CULVERT_OUT, INLET_SURFACE, OUTLET_SURFACE, INLET_GROUND, OUTLET_GROUND, PUMP_IN, PUMP_OUT, WEIR_IN, WEIR_OUT];
const flowData = createTimeframeData(timeframes, $ID, flowProperties);

const culvertAreaFrom = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_0];
const culvertAreaTo = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_1];
const pumpAreaFrom = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_0];
const pumpAreaTo = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_1];
const inletAreaFrom = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_0];
const inletAreaTo = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_1];
const weirAreaFrom = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_0];
const weirAreaTo = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_WATER_AREA_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_1];
const inletUnderground = [$SELECT_ATTRIBUTE_WHERE_NAME_IS_UNDERGROUND_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_0];
const inletSurface = [];

for (let i = 0; i < inletUnderground.length; i++) {
	inletSurface.push(inletUnderground[i] <= 0);
	inletUnderground[i] = inletUnderground[i] > 0;

}

for (var i = 0; i < timeframes; i++)
	flowData[TIMEFRAMES][i]=i;

setTimeframeValues(flowData, RAINM3, [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_RAIN_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID], {relative:true});



const cumulativeValuesRain = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_RAIN_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesRain = cumulativeValuesRain.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, RAINM3, stepwiseValuesRain);

const cumulativeValuesEvaporated = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_EVAPOTRANSPIRATION_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesEvaporated = cumulativeValuesEvaporated.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, EVAPOTRANSPIRATION, stepwiseValuesEvaporated);


const rawValuesBottomFlowIn = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_GROUND_BOTTOM_FLOW_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const cumulativeValuesBottomFlowIn = rawValuesBottomFlowIn.map(val => Math.max(0, val));

const stepwiseValuesBottomFlowIn = cumulativeValuesBottomFlowIn.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});

setTimeframeValues(flowData, BOTTOM_FLOW_IN, stepwiseValuesBottomFlowIn);


const rawValuesBottomFlowOut = [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_GROUND_BOTTOM_FLOW_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const cumulativeValuesBottomFlowOut = rawValuesBottomFlowOut.map(val => Math.abs(val));

const stepwiseValuesBottomFlowOut = cumulativeValuesBottomFlowOut.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});

setTimeframeValues(flowData, BOTTOM_FLOW_OUT, stepwiseValuesBottomFlowOut);



flowData[M3TOTAL] = data[M3TOTAL];
flowData[M3WATER] = data[M3WATER];
flowData[M3LAND] = data[M3LAND];
flowData[M3STORAGE] = data[M3STORAGE];
flowData[M3GROUND] = data[M3GROUND];
flowData[M3SEWER] = data[M3SEWER]








addFlowValues(flowData, 0, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_0], condition = inletUnderground);
addFlowValues(flowData, 1, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_1], condition = inletUnderground);
addFlowValues(flowData, 2, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_2], condition = inletUnderground);
addFlowValues(flowData, 3, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_3], condition = inletUnderground);
addFlowValues(flowData, 4, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_4], condition = inletUnderground);
addFlowValues(flowData, 5, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_5], condition = inletUnderground);
addFlowValues(flowData, 6, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_6], condition = inletUnderground);
addFlowValues(flowData, 7, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_7], condition = inletUnderground);
addFlowValues(flowData, 8, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_8], condition = inletUnderground);
addFlowValues(flowData, 9, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_9], condition = inletUnderground);
addFlowValues(flowData, 10, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_10], condition = inletUnderground);
addFlowValues(flowData, 11, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_11], condition = inletUnderground);
addFlowValues(flowData, 12, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_12], condition = inletUnderground);
addFlowValues(flowData, 13, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_13], condition = inletUnderground);
addFlowValues(flowData, 14, OUTLET_GROUND, INLET_GROUND, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_14], condition = inletUnderground);




flowData[MODEL_IN] = flowData[RAINM3].map((_, i) =>
  flowData[RAINM3][i] +
  flowData[INLET_GROUND][i] +
  flowData[INLET_SURFACE][i] +
  flowData[BOTTOM_FLOW_IN][i]
);

flowData[MODEL_OUT] = flowData[EVAPOTRANSPIRATION].map((_, i) =>
	flowData[EVAPOTRANSPIRATION][i] +
	flowData[OUTLET_GROUND][i] +
	flowData[OUTLET_SURFACE][i] +
  flowData[BOTTOM_FLOW_OUT][i] 
);

// Voeg duikerbijdrage toe
flowData[CULVERT_IN].forEach((_, i) => {
  const verschil = flowData[CULVERT_IN][i] - flowData[CULVERT_OUT][i];
  if (verschil > 0) {
    flowData[MODEL_IN][i] += verschil;
  } else {
    flowData[MODEL_OUT][i] += Math.abs(verschil);
  }
});




//Neerslag - Berging Land
const cumulativeValuesRainLand = [$SELECT_GRIDVOLUME_WHERE_GRID_WITH_ATTRIBUTE_IS_RAIN_LAND_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesRainLand = cumulativeValuesRainLand.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, RAINM3LAND, stepwiseValuesRainLand);


//Neerslag - Berging Oppervlaktewater
const cumulativeValuesRainWater= [$SELECT_GRIDVOLUME_WHERE_GRID_WITH_ATTRIBUTE_IS_RAIN_WATER_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesRainWater = cumulativeValuesRainWater.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, RAINM3WATER, stepwiseValuesRainWater);

//Neerslag - Berging Gebouwen
const cumulativeValuesRainStorage= [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_BUILDING_LAST_STORAGE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesRainStorage = cumulativeValuesRainStorage.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, RAINM3STORAGE, stepwiseValuesRainStorage);

//Berging Land - Berging riool
const cumulativeValuesSewer= [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_SEWER_LAST_VALUE_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesSewer = cumulativeValuesSewer.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, LANDSEWER, stepwiseValuesSewer);

//Verdamping totaal
const cumulativeValuesEvapotranspiration= [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_EVAPOTRANSPIRATION_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesEvapotranspiration = cumulativeValuesEvapotranspiration.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, EVAPOTRANSPIRATION, stepwiseValuesEvapotranspiration);

//Berging Bodem - Verdamping
const cumulativeValuesTranspiration= [$SELECT_GRIDVOLUME_WHERE_RESULTTYPE_IS_GROUND_TRANSPIRATION_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesTranspiration = cumulativeValuesTranspiration.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, GROUND_TRANSPIRATION, stepwiseValuesTranspiration);

//Verdamping Land
const cumulativeValuesEVAPORATIONLAND= [$SELECT_GRIDVOLUME_WHERE_GRID_WITH_ATTRIBUTE_IS_EVAPORATIONLAND_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesEVAPORATIONLAND = cumulativeValuesEVAPORATIONLAND.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, SURFACE_EVAPORATIONLAND, stepwiseValuesEVAPORATIONLAND);


//Verdamping Water
const cumulativeValuesEVAPORATIONWATER= [$SELECT_GRIDVOLUME_WHERE_GRID_WITH_ATTRIBUTE_IS_EVAPORATIONWATER_AND_TIMEFRAME_IS_X_AND_AREA_IS_ID];
const stepwiseValuesEVAPORATIONWATER = cumulativeValuesEVAPORATIONWATER.map((val, index, arr) => {
  if (index === 0) return val;
  return val - arr[index - 1];
});
setTimeframeValues(flowData, SURFACE_EVAPORATIONWATER, stepwiseValuesEVAPORATIONWATER);

//Berging Land - Uitlaat
addFlowValues(flowData, 0, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_0], condition = inletSurface);
addFlowValues(flowData, 1, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_1], condition = inletSurface);
addFlowValues(flowData, 2, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_2], condition = inletSurface);
addFlowValues(flowData, 3, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_3], condition = inletSurface);
addFlowValues(flowData, 4, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_4], condition = inletSurface);
addFlowValues(flowData, 5, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_5], condition = inletSurface);
addFlowValues(flowData, 6, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_6], condition = inletSurface);
addFlowValues(flowData, 7, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_7], condition = inletSurface);
addFlowValues(flowData, 8, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_8], condition = inletSurface);
addFlowValues(flowData, 9, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_9], condition = inletSurface);
addFlowValues(flowData, 10, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_10], condition = inletSurface);
addFlowValues(flowData, 11, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_11], condition = inletSurface);
addFlowValues(flowData, 12, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_12], condition = inletSurface);
addFlowValues(flowData, 13, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_13], condition = inletSurface);
addFlowValues(flowData, 14, OUTLET_SURFACE, INLET_SURFACE, inletAreaFrom, inletAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_INLET_Q_AND_INDEX_IS_14], condition = inletSurface);


//Berging Water - Stuw
addFlowValues(flowData, 0, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_0]);
addFlowValues(flowData, 1, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_1]);
addFlowValues(flowData, 2, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_2]);
addFlowValues(flowData, 3, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_3]);
addFlowValues(flowData, 4, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_4]);
addFlowValues(flowData, 5, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_5]);
addFlowValues(flowData, 6, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_6]);
addFlowValues(flowData, 7, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_7]);
addFlowValues(flowData, 8, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_8]);
addFlowValues(flowData, 9, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_9]);
addFlowValues(flowData, 10, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_10]);
addFlowValues(flowData, 11, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_11]);
addFlowValues(flowData, 12, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_12]);
addFlowValues(flowData, 13, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_13]);
addFlowValues(flowData, 14, WEIR_IN, WEIR_OUT, weirAreaFrom, weirAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_WEIR_HEIGHT_AND_INDEX_IS_14]);

//Berging Water - Duiker
addFlowValues(flowData, 0, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_0]);
addFlowValues(flowData, 1, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_1]);
addFlowValues(flowData, 2, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_2]);
addFlowValues(flowData, 3, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_3]);
addFlowValues(flowData, 4, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_4]);
addFlowValues(flowData, 5, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_5]);
addFlowValues(flowData, 6, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_6]);
addFlowValues(flowData, 7, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_7]);
addFlowValues(flowData, 8, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_8]);
addFlowValues(flowData, 9, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_9]);
addFlowValues(flowData, 10, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_10]);
addFlowValues(flowData, 11, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_11]);
addFlowValues(flowData, 12, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_12]);
addFlowValues(flowData, 13, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_13]);
addFlowValues(flowData, 14, CULVERT_IN, CULVERT_OUT, culvertAreaFrom, culvertAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_CULVERT_DIAMETER_AND_INDEX_IS_14]);

//Berging Water - Pomp
addFlowValues(flowData, 0, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_0]);
addFlowValues(flowData, 1, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_1]);
addFlowValues(flowData, 2, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_2]);
addFlowValues(flowData, 3, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_3]);
addFlowValues(flowData, 4, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_4]);
addFlowValues(flowData, 5, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_5]);
addFlowValues(flowData, 6, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_6]);
addFlowValues(flowData, 7, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_7]);
addFlowValues(flowData, 8, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_8]);
addFlowValues(flowData, 9, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_9]);
addFlowValues(flowData, 10, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_10]);
addFlowValues(flowData, 11, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_11]);
addFlowValues(flowData, 12, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_12]);
addFlowValues(flowData, 13, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_13]);
addFlowValues(flowData, 14, PUMP_IN, PUMP_OUT, pumpAreaFrom, pumpAreaTo, [$SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_PUMP_Q_AND_INDEX_IS_14]);




//Berging Riool - Berging Land
flowData[SEWER_OVERFLOW_OUT] = [];

flowData[SEWER_OVERFLOW_OUT] = [
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_0,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_1,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_2,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_3,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_4,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_5,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_6,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_7,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_8,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_9,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_10,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_11,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_12,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_13,
  $SELECT_ATTRIBUTE_WHERE_NAME_IS_OBJECT_FLOW_OUTPUT_AND_BUILDING_IS_XA_SEWER_OVERFLOW_AND_INDEX_IS_14
];


createTable("waterFlowTable", flowData, flowProperties, flowColors, flowTitles);


const sankeyproperties = [TIMEFRAMES, MODEL_IN, MODEL_OUT, M3LAND, M3WATER, M3GROUND, M3STORAGE, M3SEWER, RAINM3, RAINM3LAND, RAINM3WATER, RAINM3STORAGE,GROUND_TRANSPIRATION, EVAPOTRANSPIRATION, SURFACE_EVAPORATIONLAND, SURFACE_EVAPORATIONWATER, BOTTOM_FLOW_IN, BOTTOM_FLOW_OUT,LANDSEWER,  SEWER_IN, SEWER_OVERFLOW_OUT,  CULVERT_IN, CULVERT_OUT, INLET_SURFACE, OUTLET_SURFACE, INLET_GROUND, OUTLET_GROUND, PUMP_IN, PUMP_OUT, WEIR_IN, WEIR_OUT];

let links = createLinks(sankeyproperties);
for(let i = 0 ; i < timeframes; i++){
	//Model in
	addLink(links, i, MODEL_IN, RAINM3, flowData[RAINM3][i]);
	addLink(links, i, MODEL_IN, INLET_GROUND, flowData[INLET_GROUND][i]);
	addLink(links, i, MODEL_IN, INLET_SURFACE, flowData[INLET_SURFACE][i]);
	addLink(links, i, MODEL_IN, BOTTOM_FLOW_IN, flowData[BOTTOM_FLOW_IN][i]);
	
	
	//Neerslag	
	addLink(links, i, RAINM3, M3LAND, flowData[RAINM3LAND][i]);
	addLink(links, i, RAINM3, M3WATER, flowData[RAINM3WATER][i]);
	addLink(links, i, RAINM3, M3STORAGE, flowData[RAINM3STORAGE][i]);
	
	//Berging Land
	addLink(links, i, M3LAND, M3SEWER, flowData[LANDSEWER][i]);
	addLink(links, i, M3LAND, EVAPOTRANSPIRATION, flowData[SURFACE_EVAPORATIONLAND][i]);
	//addLink(links, i, M3LAND, M3GROUND, flowData[][i]);
			
	//Berging oppervlaktewater
	//addLink(links, i, M3WATER, M3GROUND, flowData[][i]);
	addLink(links, i, M3WATER, WEIR_OUT, flowData[WEIR_OUT][i]);
	addLink(links, i, M3WATER, EVAPOTRANSPIRATION, flowData[SURFACE_EVAPORATIONWATER][i]);
	addLink(links, i, M3WATER, CULVERT_OUT, flowData[CULVERT_OUT][i]);
	addLink(links, i, M3WATER, OUTLET_SURFACE, flowData[OUTLET_SURFACE][i]);
	addLink(links, i, M3WATER, PUMP_OUT, flowData[PUMP_OUT][i]);

	//Berging Bodem
	addLink(links, i, M3GROUND, BOTTOM_FLOW_OUT, flowData[BOTTOM_FLOW_OUT][i]);
	addLink(links, i, M3GROUND, GROUND_TRANSPIRATION, flowData[GROUND_TRANSPIRATION][i]);
	addLink(links, i, M3GROUND, OUTLET_SURFACE, flowData[OUTLET_SURFACE][i]);
	
	//Berging Riool
	addLink(links, i, M3SEWER, SEWER_OVERFLOW_OUT, flowData[SEWER_OVERFLOW_OUT][i]);
	addLink(links, i, M3SEWER, SEWER_IN, flowData[SEWER_IN][i]);
	
	//Inlaat Surface
	addLink(links, i, INLET_SURFACE, M3LAND, flowData[INLET_SURFACE][i]); // Eigenlijk zou hier een uitsplitsing moeten zijn tussen een inlaat op land en een inlaat in het water
	
	//Inlaat Ground
	addLink(links, i, INLET_GROUND, M3GROUND, flowData[INLET_GROUND][i]);
	
	//Uitlaat Surface
	addLink(links, i, OUTLET_SURFACE, MODEL_OUT, flowData[OUTLET_SURFACE][i]); 
	
	//Uitlaat Land
	addLink(links, i, OUTLET_GROUND, MODEL_OUT, flowData[OUTLET_GROUND][i]); 
	
	//Kwel 
	addLink(links, i, BOTTOM_FLOW_IN, M3GROUND, flowData[BOTTOM_FLOW_IN][i]);
	
	//Riool overstort
	addLink(links, i, SEWER_OVERFLOW_OUT, M3LAND, flowData[SEWER_OVERFLOW_OUT][i]);
	
	//POC
	addLink(links, i, SEWER_IN, MODEL_OUT, flowData[SEWER_IN][i]);
	
	//Wegzijging
	addLink(links, i, BOTTOM_FLOW_OUT, MODEL_OUT, flowData[BOTTOM_FLOW_OUT][i]);
	
	//Platen transpiratie
	addLink(links, i, GROUND_TRANSPIRATION, MODEL_OUT, flowData[GROUND_TRANSPIRATION][i]);
	
	//Stuw
	addLink(links, i, WEIR_OUT, WEIR_IN, flowData[WEIR_IN][i]);
	
	//Duiker
	addLink(links, i, CULVERT_IN, M3WATER, flowData[CULVERT_IN][i]);
		
	//Pomp
	addLink(links, i, PUMP_IN, M3WATER, flowData[PUMP_IN][i]);
			
	//Verdamping
	addLink(links, i, EVAPOTRANSPIRATION, MODEL_OUT, flowData[EVAPOTRANSPIRATION][i]);
	
	//Transpiratie
	addLink(links, i, GROUND_TRANSPIRATION, MODEL_OUT, flowData[GROUND_TRANSPIRATION][i]);
	
	

}

const sankeyLayout = createSankeyPlotLayout();

const sankeySlider = document.getElementById("sankeySlider");
sankeyPlot("sankeyPlot", links, sankeySlider.value, sankeyproperties, flowColors, flowTitles, sankeyLayout);

setupTimeframeSlider(sankeySlider, timeframe, timeframes, function() {
	sankeyPlot("sankeyPlot", links, sankeySlider.value, sankeyproperties, flowColors, flowTitles, sankeyLayout);
});

let balanceCSVButton = document.getElementById("balanceCSVButton");
let flowCSVButton = document.getElementById("flowCSVButton");

addDownloadHandler(balanceCSVButton, "waterbalance.csv", ()=> toCSVContent(data, properties, titles, timeframes));
addDownloadHandler(flowCSVButton, "waterflow.csv", ()=> toCSVContent(flowData, flowProperties, flowTitles, timeframes));

	</script>
