
	<style>
		@charset "UTF-8";

:root {
	--tygron-white: rgba(245, 245, 245, 1.0);
	--tygron-blue: rgb(10, 173, 207);
}

html, body {
	padding: 0px;
	background-color: white;
}

/* Style the button that is used to open and close the collapsible content */
.collapsible {
	background-color: #eee;
	color: #444;
	cursor: pointer;
	padding: 18px;
	width: 100%;
	border: none;
	text-align: left;
	outline: none;
	font-size: 15px;
}

.active, .collapsible {
	font-weight: bold;
	font-size: 1.5em;
}

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */
.active, .collapsible:hover {
	background-color: cornflowerblue;
	color: white;
}

/* Style the collapsible content. Note: hidden by default */
.content {
	padding: 0 0.25em;
	background-color: white;
	overflow: hidden;
}

.content.direct {
	padding: 0 0em;
}

.content .delayed {
	max-height: 0;
	transition: max-height 0.2s ease-out;
}

.collapsible:after {
	content: '\02795';
	/* Unicode character for "plus" sign (+) */
	font-size: 13px;
	color: white;
	float: right;
	margin-left: 5px;
}

.active:after {
	content: "\2796";
	/* Unicode character for "minus" sign (-) */
}

.datatable thead {
	font-weight: bold;
}

.datatable {
	height: 1px;
	border-collapse: collapse;
	width: 100%;
	table-layout: auto;
	font-family: Arial;
	font-size: 0.9em;
}

.datatable tr {
	/*border-bottom: 1px solid black;*/
	height: 100%;
}

.datatable tr:nth-child(even) {
	background-color: rgb(240, 240, 240)
}

.datatable td {
	height: 100%;
}

.datatable td>div {
	margin: 0.25em;
	padding: 0.25em 0.25em 0.25em 0.25em;
	position: relative;
	border-radius: 0.5em;
}

.timeframe-slider {
  --primaryColor: #0366D6;
  --value-active-color: white;
  --value-background: var(--primaryColor);
  --value-font: 700 12px/1 Arial;
  --progress-color: #EEE;
  --progress-shadow: 2px 2px 4px rgba(0,0,0, .1) inset;
  --fill-color: var(--primaryColor);
  --thumb-size: 16px;
  --track-height: calc(var(--thumb-size)/2);
  --thumb-shadow: 0 0 3px rgba(0,0,0,.2);
  --ticks-thickness: 1px;
  --ticks-height: 5px;
  --ticks-color: silver;
  --step: 1;
  --ticks-count: (var(--max) - var(--min)) / var(--step);
  --maxTicksAllowed: 30;
  --too-many-ticks: Min(1, Max(var(--ticks-count) - var(--maxTicksAllowed), 0));
  --x-step: Max( var(--step), var(--too-many-ticks) * (var(--max) - var(--min)) ); /* manipulate the number of steps if too many ticks exist, so there would only be 2*/
  --tickInterval: 100/((var(--max) - var(--min)) / var(--step)) * var(--tickEvery, 1);
  --tickIntervalPerc: calc((100% - var(--thumb-size))/( (var(--max) - var(--min)) / var(--x-step) ) * var(--tickEvery, 1));
  --completed: calc((var(--value) - var(--min) ) / (var(--max) - var(--min)) * 100);
  
  @mixin thumb{
    appearance: none;
    height: var(--thumb-size);
    width: var(--thumb-size);
    border-radius: 50%;
    background: var(--thumb-color, white);
    border: 1px solid silver;
    box-shadow: var(--inner-shadow, 0 0), var(--thumb-shadow);
  }
  
  display: inline-block;
  height: var(--thumb-size);
  margin: calc((var(--thumb-size) - var(--track-height)) * -.25) var(--thumb-size) 0;
  background: linear-gradient(to right, var(--ticks-color) var(--ticks-thickness), transparent 1px) repeat-x;
  background-size: var(--tickIntervalPerc) var(--ticks-height);
  background-position: calc(var(--thumb-size)/2) bottom;
  padding-bottom: var(--ticks-height);
  position: relative;

  &::before, 
  &::after {
    font: 12px Arial;
    content: counter(x);
    position: absolute;
    bottom: -2.5ch;
  }
  
  &::before {
    counter-reset: x var(--min);
    left: 0;
  }
  
  &::after {
    counter-reset: x var(--max);
    right: 0;
  }
  
  &__progress {
    position: absolute;
    left: 0;
    top: calc(50% - var(--ticks-height)/2);
    transform: translateY(-50%);
    width: 100%;
    height: calc(var(--track-height));
    pointer-events: none;
    z-index: -1;
    box-shadow: var(--progress-shadow); 
    border-radius: 20px;
    background: var(--fill-color, white);

    &::before {
      content: '';
      display: block;
      margin-left: auto;
      margin-right: -.5px;
      width: calc(100% - var(--completed) * 1%);
      height: 100%;
      background: var(--progress-color, #EEE);
      box-shadow: inherit;
      border-radius: 0 20px 20px 0;
    }
  }
  
  & > input {
    width: 100%;
    height: var(--thumb-size);
   /* margin: 0 calc(var(--thumb-size)/-2);*/
    margin: 0;
    cursor: -webkit-grab;
    cursor: grab;
    outline: none;
    background: none;
    
    &::-webkit-slider-thumb { 
      @include thumb;
    }
    
    &::-moz-slider-thumb { 
      @include thumb;
    }
    
    &::-ms-thumb { 
      @include thumb;
    }
    
    &:active {
      cursor: grabbing;
      --thumb-color: var(--fill-color);
      --inner-shadow: 0 0 0 calc(var(--thumb-size)/4) inset white;
      + output { transition: 0s; }
    }
    
    &:hover + output {
      background: var(--value-background);
      color: var(--value-active-color);
      transform: translate(var(--x-offset), 0);
      box-shadow: 0 0 0 3px var(--value-background);
    }
  }

  & > output {
    --x-offset: calc(var(--completed) * -1%);
    pointer-events: none;
    position: absolute;
    background: transparent;
    border-radius: 10px;
    padding: 0 4px;
    top: -3ch; /* calc(Max(var(--thumb-size), var(--track-height)) * -1);*/
    left: calc(((var(--value) - var(--min))/(var(--max) - var(--min))) * 100%);
    transform: translate(var(--x-offset), 6px);
    transition: all .12s ease-out, left 0s, top 0s;
  
    &::after {
      content: var(--text-value);
      font: var(--value-font);
    }
  }
}
	body {
		padding: 0px;
		margin:0px; 
		height: 100vh;
		
		position: relative;
		display: flex;
		flex-direction: column;
	}
	#pageControls {
		height: 2em;
		line-height: 2em;
		
		position:relative;
	}
	.page {
		display: flex;
		flex-direction: row;
		
		flex-basis: 10em;
		flex-grow: 1;
		
		position: relative;
	}
	.page > div {
		flex-grow:1;
		flex-basis:50%;
	}
	/*
	.entry {
		position: relative;
		width: 100%;
		height: 2em;
	}
	.entry > div:last-child {
		position:absolute;
		right:0px;
	}
	.entry > div:first-child {
		position:absolute;
		left:0px;
	}
	.entry .inputsPart input[type="button"] {
		margin: 0px 0.5em;
	}
	input[type="button"] {
		background-color: lightyellow;
	}
	input[type="button"].selected {
		background-color: lightblue;
	}*/

		body{}
	</style>
	
	<div id="controls">
	</div>
	
	<div class="page">
		<div id="chart">
		</div>
	</div>
	
	<script>
		

class ArrayUtils {
	
	/** 
	 * 	Rescale a value to desired range. 
	 * 		E.g. Turn fraction into neat percentage: scaleValue(fraction, [0,1], [0,100], true)
	 * 		Non-numeric value input is ignored and returned as-is.
	 * 		originalRange and targetRange must be an array of exactly 2 different numbers
	*/
	static scaleValue(value, originalRange, targetRange, round = false) {
		if (Array.isArray(value)) {
			return this.scaleValues(value);
		}
		if (!NumberUtils.isNumeric(value)) {
			return value;
		}
		if ((!this.isRange(originalRange)) || (!this.isRange(originalRange))) {
			throw 'Both the original and target range must be array of 2 different numeric values';
		}
		value = ((value - originalRange[0]) / (originalRange[1] - originalRange[0]));
		value = (value * (targetRange[1] - targetRange[0])) + targetRange[0];
	
		return round ? Math.round(value) : value;
	}
	
	/** 
	 *	Array-wrapper for scaleValue
	*/
	static scaleValues(values, originalRange, targetRange, round = false) {
		if (!Array.isArray(values)) {
			return this.scaleValue(values, originalRange, targetRange, round);
		}
		
		let arr = [];
		for (let i in values) {
			arr.push(this.scaleValue(values[i], originalRange, targetRange, round));
		}
		return arr;
	}
	
	static isRange(value, allowEqual = false) {
		if (!Array.isArray(value) || value.length != 2) {
			return false;
		}
		if ((!NumberUtils.isNumeric(value[0])) || (!NumberUtils.isNumeric(value[1]))) {
			return false;
		}
		return ((value[0] != value[1]) || allowEqual);
	}
	
	static coerceToArray(value) {
		return (!Array.isArray(value)) ? [value] : value;
	}
	static unArrayIfSingleElement(value, nullIfEmpty = true) {
		if (!Array.isArray(value)) {
			return value;
		}
		if (value.length === 1) {
			return value[0];
		}
		if (value.length === 0) {
			return nullIfEmpty ? null : value;
		}
		return value
	}
	
	static flipMatrix(matrix) {
		let newMatrix = [];
		let ySize = null;
		for (let i = 0; i < matrix.length; i++) {
			ySize = ySize ?? matrix[i].length;
			if (matrix[i].length != ySize) {
				throw 'Matrix lengths inconsistent, could not flip';
			}
			for (let j = 0; j < matrix[i].length; j++) {
				newMatrix[j] = newMatrix[j] ?? [];
				newMatrix[j][i] = matrix[i][j];
			}
		}
		return newMatrix;
	}
	
	static isMatrix(matrix) {
		if (!Array.isArray(matrix)) {
			return false;
		}
		for (let inner of matrix) {
			if (!Array.isArray(inner)) {
				return false;
			}
		}
		return true;
	}
	
}



/**
 * Listing Panel
 * 
 * To display a matrix of information with flexible rendering rules.
 * headers/content/footers : 
 * 		A matrix of values ( 0...n rows/arrays with 0...n values ) to display
 * headersTypes/contentTypes/footerTypes : 
 * 		A matching matrix of rendering types. Either predefined of functions. Either one array for all rows, or a matrix. Missing rows in a matrix use defaultTypes instead
 * defaultHeadersTypes/defaultContentTypes/defaultFootersTypes : 
 * 		A single renderer definition (or array of multiple matching one row) to render with if no list of renderers is provided
 * tableMode : 
 * 		Whether to render as an HTML table. If not, will use divs instead, per cell, per row, and one for the full container 
 * flipXY : 
 * 		If true, the rows in the data will be layed out as columns, and vice versa.
 */

class ListingPanelController {
	
	constructor(domTarget, args = {}) {
		this.args = Object.assign( {
				'content' : [],
				'contentTypes' : [],
				'defaultContentTypes' : 'label',
				
				'headers': [],
				'headersTypes' : [],
				'defaultHeaderTypes' : 'label',
				
				'footers':[],
				'footersTypes': [],
				'defaultFootersTypes': 'label',
				
				'tableMode': true,
				'flipXY' : false,
			}, args );
		
		this.parent = null;
		this.domElement = null;
		
		try {
			this.parent = ensureDomElement(domTarget);
		} catch( err ) {
		}
	}
	
	addContent(content, renderTypes = null) {
		this.args['content'].push(content);
		if (renderTypes) {
			let index = this.args[content].length -1;
			this.args['contentTypes'][index] = renderTypes;
		}
	}
	addHeader(content, renderTypes = null) {
		this.args['headers'].push(content);
		if (renderTypes) {
			let index = this.args[content].length -1;
			this.args['footersTypes'][index] = renderTypes;
		}
	}
	addFooter(content, renderTypes = null) {
		this.args['footers'].push(content);
		if (renderTypes) {
			let index = this.args[content].length -1;
			this.args['headersTypes'][index] = renderTypes;
		}
	}
	
	setDefaultContentRenderTypes(renderTypes) {
			this.args['defaultContentTypes'] = renderTypes;
	}
	setDefaultHeaderRenderTypes(renderTypes) {
			this.args['defaultHeadersTypes'] = renderTypes;
	}
	setDefaultFootersRenderTypes(renderTypes) {
			this.args['defaultFootersTypes'] = renderTypes;
	}
	
	/* Based on the configuration and content, create the actual dom elements. */
	render( rerender = true ) {
		if (this.domElement && ! rerender) {
			return this.domElement;
		}
		
		let renderRules = this._createRenderRules(this.args)
		if (this.args['flipXY']) {
			renderRules = ArrayUtils.flipMatrix(renderRules);
		}
		let domElement = this._createDomElement(renderRules, this.args['tableMode']);
		
		if (this.parent) {
			if (this.domElement) {
				this.parent.removeChild(this.domElement);
			}
			this.parent.appendChild(domElement);
		}
		
		this.domElement = domElement;
	}
	
	getValues(section='content') {
		let selector = 'entry'+  (section ? ' '+section : '');
		let entries = this.domElement.getElementsByClassName(selector);
		
		let values = [];
		for (let entry of entries) {
			let entryValues = [];
			let inputs = entry.getElementsByClassName('input');
			for (let input of inputs) {
				entryValues.push(this._getValueFromInput(input));
			}
			values.push(entryValues);
		}
		return values;
	}
	
	getRenderer(type, args) {
		type = type ?? 'label';
		if (typeof type === 'function') {
			return type;
		}
		
		let renderer = null;
		try {
			renderer = ListingPanelController.getRenderer(type, args);
		} catch (err) {
			console.error('Failed to get renderer type '+type+', reason: '+err);
			renderer = ListingPanelController.getRenderer('label');
		}
		return renderer;
	}
	
	
	static DEFAULT_CLASS = 'listingPanel';
	
	
	/* Turn the content and provided render types into prepared render rules for each individual cell of the listing */
	_createRenderRules( args = {} ) {
		
		let renderRules = [];
		for ( let i=0 ; i<args['headers'].length ; i++ ) {
			let types = this._getRenderTypesFromMatrix( args['headersTypes'], i, args['defaultHeaderTypes']);
			let prepared = this._createCellRenderRules(args['headers'][i], types, {'special':'header'});
			if (prepared) {
				renderRules.push(prepared);
			}
		}
		for ( let i=0 ; i<args['content'].length ; i++ ) {
			let types = this._getRenderTypesFromMatrix( args['contentTypes'], i, args['defaultContentTypes']);
			let prepared = this._createCellRenderRules(args['content'][i], types, {'special':'content'});
			if (prepared) {
				renderRules.push(prepared);
			}
		}
		for ( let i=0 ; i<args['footers'].length ; i++ ) {
			let types = this._getRenderTypesFromMatrix( args['footersTypes'], i, args['defaultFootersTypes']);
			let prepared = this._createCellRenderRules(args['footers'][i], types, {'special':'footer'});
			if (prepared) {
				renderRules.push(prepared);
			}
		}
		return renderRules;
	}
	
	/* From a matrix of renderttpes, get the appropriate row if possible. Otherwise, use the default Types. */
	_getRenderTypesFromMatrix(matrix, index, defaultTypes = []) {
		if ( Array.isArray(matrix) ) {
			if ( matrix.length == 0 ) {
				return defaultTypes;
			}
			if ( !ArrayUtils.isMatrix(matrix) ) {
				return matrix;
			}
			return matrix[index] ?? defaultTypes;
		}
		return matrix ?? defaultTypes;
	}
	
	/* Create the render rule for an array of individual cells. */
	_createCellRenderRules(contents = null, renderers = [], defaultRules = {}) {
		defaultRules = Object.assign( {
				'content' 	: null, // Default data, overwritten by the actual data
				'rendering' : null, // Default type to use if "types" does not extend as far as datas
				'special' 	: null, // Whether the rules are for headers, footers, or other special contents
			}, defaultRules );
		if ( contents===null ) {
			return [];
		}
		if ( !Array.isArray(contents) ) {
			contents = [contents];
		}
		if ( !Array.isArray(renderers) ) {
			renderers = Array(contents.length).fill(renderers);
		}
		let cellRenderRules = [];
		for (let i=0;i<contents.length;i++) {
			let renderType = renderers[i];
			let renderOptions = null;
			if (renderType['type']) {
				renderOptions = renderType['options'] ?? null;
				renderType = renderType['type'];
			}
			cellRenderRules.push( Object.assign( {}, defaultRules, {
				'content'	: contents[i],
				'rendering'	: renderType ?? defaultRules['rendering'],
				'options'	: renderOptions,
			} ) );
		}
		return cellRenderRules;
	}
	
	_createDomElement(renderRules, tableMode) {
		
		let domElement;
		let domInnerElement;
		
		if (tableMode) {
			domElement = document.createElement('table');
			domInnerElement = document.createElement('tbody');
			domElement.appendChild(domInnerElement);
		} else {
			domElement = document.createElement('div');
			domInnerElement = domElement;
		}
		
		for ( let i = 0 ; i < renderRules.length ; i++ ) {
			let rowElement = this._createDomElementsRow(renderRules[i], tableMode);
			domInnerElement.appendChild(rowElement);
		}
		domElement.classList.add(ListingPanelController.DEFAULT_CLASS);
		
		return domElement;	
	}
	
	/* Generate */
	_createDomElementsRow(rowRenderRules, tablemode) {
		
		let rowElementType = tablemode ? 'tr' : 'div';
		let rowElement = document.createElement(rowElementType);
		rowElement.classList.add('entry');
		
		let specialRow = null;
		
		for ( let i = 0 ; i < rowRenderRules.length ; i++ ) {
			let cellRule = rowRenderRules[i];
			let contentRenderer = this.getRenderer(cellRule['rendering'], cellRule['options']);
			
			let cellElement = contentRenderer(cellRule['content']);
			if (cellRule['special']) {
				cellElement.classList.add(cellRule['special']);
			}
			
			if (tablemode) {
				let wrappingCell = null;
				if (cellRule['special'] === 'header') {
					wrappingCell = document.createElement('th');
				} else {
					wrappingCell = document.createElement('td');
				}
				wrappingCell.appendChild(cellElement);
				cellElement = wrappingCell;
			}
			
			rowElement.appendChild(cellElement);
			
			specialRow = specialRow ?? cellRule['special'];
			if (specialRow !== cellRule['special']) {
				specialRow = false;	
			}
		}
		
		if (specialRow) {
			rowElement.classList.add(specialRow);
		}
		
		return rowElement;
	}
	
	_getValueFromInput(input) {
		if (typeof input.getValue === 'function') {
			return input.getValue();
		}
		let selecteds = input.getElementsByClassName('selected');
		if (selecteds.length>0) {
			return selecteds[0].value;
		}
	}
	
	//Cache to prevent recreating renderers when many values are displayed the same
	static cachedRenderers = {};
	static getRenderer(type, args) {
		if ( typeof type === 'function') {
			return type;
		}
		
		let cacheKey = JSON.stringify([type,args]);
		let renderer = this.cachedRenderers[cacheKey] ?? null;
		if ( renderer ) {
			return renderer;
		}
	
		switch(type) {
			case 'label':
				renderer = this._getRendererLabel(args);
				break;
			case 'buttons':
				renderer = this._getRendererButtons(args);
				break;
			default:
				throw 'Could not find renderer type '+type;
		}
		
		if (renderer === false) {
			throw 'Rendering type '+type+' requires arguments. Use getRenderer(type, args) to prepare this renderer instance.';
		}
		
		this.cachedRenderers[cacheKey] = renderer;
		return renderer;
	}
	
	static _getRendererLabel() {
		return function(content) {
			let element = document.createElement('div');
			element.classList.add('label');
			let labelElement = document.createElement('span');
			labelElement.innerHTML = content;
			element.appendChild(labelElement);
			return element;
		}
	}
	
	static _getRendererButtons(options) {
		if ( !Array.isArray(options)) {
			throw 'Options required for buttons renderer';
		}
		return function(content) {
			let element = document.createElement('div');
			element.classList.add('input');
			element.classList.add('buttons')
			
			for (let i = 0; i < options.length ; i++) {
				let inputElement = document.createElement('input');
				inputElement.type = 'button';
				inputElement.value = options[i];
				if (inputElement.value == content) {
					inputElement.classList.add('selected');
				}
				element.appendChild(inputElement);
			}
			attachHandler(element, 'click', 'input[type="button"]', function(event){
				let oldElement = this.closest('.buttons').getElementsByClassName('selected');
				if (oldElement.length>0) {
					for( let el of oldElement) {
						el.classList.remove('selected');
					}
					oldElement = oldElement[0] ?? null;
				}
				this.classList.add('selected');
				if (this != oldElement) {
					this.closest('.'+ListingPanelController.DEFAULT_CLASS).dispatchEvent(new Event('change'));
				}
			});
			return element;
		}
	}
}
class NumberUtils {

	static isNumeric(value) {
		return !isNaN(value);
	}

}
class QueryDataManager {

	constructor(args = {}) {
		args = Object.assign({
			allowFallbackData: true
		}, args);

		this.setAllowFallbackData(args['allowFallbackData']);
	}

	allowFallbackData = true;

	queryDataObjects = {};

	addQueryData(key, args = {}) {
		args = Object.assign({
			query: null,
			fallbackData: null,
			x: null,
			y: null,
		}, args);

		let queryData = new this.constructor.QueryDataObject(args);
		this.queryDataObjects[key] = queryData;

		return queryData;
	}

	addQuery(key, query) {
		return this.addQueryData(key, { query: query });
	}

	addQueryDatas(queries = {}) {
		for (let queryKey in queries) {
			this.addQueryData(queryKey, queries[queryKey]);
		}
	}

	getData(key, forceToArray = true) {
		let queryDataObject = this.getQueryDataObject(key);
		let data = queryDataObject.getData(this.allowFallbackData);
		return forceToArray ? ArrayUtils.coerceToArray(data) : data;
	}

	getDataMatrix(key, outerArrayKey = null, innerArrayKey = null) {
		//x in query is inner , y in query is outer
		let queryDataObject = this.getQueryDataObject(key);

		//Dimensionless		
		if (!outerArrayKey && !innerArrayKey) {
			if (queryDataObject.hasNoDimensions()) {
				return queryDataObject.getData(this.allowFallbackData);
			}
			throw new RangeError('No dimension(s) defined while requesting data by key ' + key);
		}

		//Undefined dimensions
		if (outerArrayKey == innerArrayKey) {
			throw new RangeError('Cannot request duplicate dimension ' + outerArrayKey + ' for data registered by key ' + key)
		}
		if (outerArrayKey && (!queryDataObject.hasDimension(outerArrayKey))) {
			throw new RangeError('Dimension ' + outerArrayKey + ' not known for data registered by key ' + key);
		}
		if (innerArrayKey && (!queryDataObject.hasDimension(innerArrayKey))) {
			throw new RangeError('Dimension ' + innerArrayKey + ' not known for data registered by key ' + key);
		}

		// 2 Dimensions
		if (queryDataObject.hasDimensionX() && queryDataObject.hasDimensionY()) {
			if (innerArrayKey == queryDataObject.getDimensionX() || outerArrayKey == queryDataObject.getDimensionY()) {
				return queryDataObject.getData(this.allowFallbackData);
			} else {
				return ArrayUtils.flipMatrix(queryDataObject.getData(this.allowFallbackData));
			}
		}

		// X dimension
		else if ( queryDataObject.hasDimensionX() ) {
			if (innerArrayKey == queryDataObject.getDimensionX()) {
				return [queryDataObject.getData(this.allowFallbackData)];
			} else if (outerArrayKey == queryDataObject.getDimensionX()) {
				return queryDataObject.getData(this.allowFallbackData);
			}
			
		}
		
		//Y dimension
		else if ( queryDataObject.hasDimensionY() ) {
			if (innerArrayKey == queryDataObject.getDimensionY()) {
				return ArrayUtils.flipMatrix(queryDataObject.getData(this.allowFallbackData));
			} else if (outerArrayKey == queryDataObject.getDimensionY()) {
				let data = ArrayUtils.coerceToArray(queryDataObject.getData(this.allowFallbackData))
				return [].concat(...data);
			}
			
		}
		
		//Undefined
		throw new RangeError('Unknown state occured while requesting data of key ' + key + ' with dimension(s) ' + outerArrayKey + ', ' + innerArrayKey);
	}

	getQueryDataObject(key) {
		let queryDataObject = this.queryDataObjects[key];
		if (!queryDataObject) {
			throw new RangeError('No QueryData registered with key ' + key);
		}
		return queryDataObject;
	}

	getUnresolvedDataKeys() {
		let unresolved = [];
		for (let key of Object.keys(this.queryDataObjects)) {
			if (!this.getQueryDataObject(key).isAllQueryDataResolved()) {
				unresolved.push(key);
			}

		}
		return unresolved;
	}

	setAllowFallbackData(allow) {
		this.allowFallbackData = (!!allow);
	}

	allQueriesResolved() {
		return this.getUnresolvedDataKeys().length === 0;
	}

	static isResolvedQueryData(query) {
		this.QueryDataObject.appearsResolved(query);
	}

	static {
		this.QueryDataObject = class {
			constructor(args) {
				args = Object.assign({
					query: null,
					fallbackData: null,
					x: null,
					y: null,
				}, args);

				this.setQueryData(args['query']);
				this.setFallbackData(args['fallbackData']);

				this.setDimensionX(args['x']);
				this.setDimensionY(args['y']);
			}

			queryData = null;
			fallbackData = null;
			x = null;
			y = null;

			getData(allowFallbackData = true) {
				if (this.hasResolvedQueryData()) {
					return this.getQueryData();
				}
				if (!allowFallbackData) {
					throw 'Query not resolved and no fallback data allowed';
				}

				if (this.hasResolvedFallbackData()) {
					return this.getFallbackData();
				}
				throw 'Query not resolved and no fallback data available';
			}

			getQueryData() {
				if (this.hasNoDimensions()) {
					return ArrayUtils.unArrayIfSingleElement(this.queryData);
				}
				return this.queryData;
			}
			getFallbackData() {
				if (this.hasNoDimensions()) {
					return ArrayUtils.unArrayIfSingleElement(this.fallbackData);
				}
				return this.fallbackData;
			}

			setQueryData(data) {
				this.queryData = data === null ? null : this.constructor.parseToData(data);
			}

			setFallbackData(data) {
				this.fallbackData = data === null ? null : this.constructor.parseToData(data);
			}
			setDimensionX(data) {
				this.x = data ?? null;
			}
			setDimensionY(data) {
				this.y = data ?? null;
			}

			getDimensionX() {
				return this.x;
			}
			getDimensionY() {
				return this.y;
			}

			hasDimensionX() {
				return this.x !== null;	
			}
			
			hasDimensionY() {
				return this.y !== null;
			}
			hasDimension(dimension) {
				if (this.hasDimensionX() && this.getDimensionX() == dimension) {
					return true;
				}
				if (this.hasDimensionY() && this.getDimensionY() == dimension) {
					return true;
				}
				return false
			}
			hasNoDimensions() {
				return !(this.hasDimensionX() || this.hasDimensionY());
			}

			hasQueryData() {
				return this.constructor.exists(this.queryData);
			}
			hasResolvedQueryData() {
				return this.constructor.appearsResolved(this.queryData);
			}
			hasFallbackData() {
				return this.constructor.exists(this.fallbackData);
			}
			hasResolvedFallbackData() {
				return this.constructor.appearsResolved(this.fallbackData);
			}

			isAllQueryDataResolved() {
				if (this.hasFallbackData() && !this.hasResolvedFallbackData()) {
					return false;
				}
				if (this.hasQueryData() && !this.hasResolvedQueryData()) {
					return false;
				}
				return true;
			}

			static parseToData(value) {
				if (Array.isArray(value)) {
					//Arrays can always be considered already-processed and thus fine as-is.
					return value;
				}
				//Simple quick parse
				let parsedValue = null;
				try {
					parsedValue = JSON.parse('[' + value + ']');
				} catch (err) {
					parsedValue = value;
				}
				return parsedValue;
			}

			static exists(value) {
				if (typeof value === 'undefined') {
					return false;
				}
				if (value === null) {
					return false;
				}
				return true;
			}
			static appearsResolved(value) {
				if (!this.exists(value)) {
					return false;
				}
				if (!value.indexOf) {
					//could be a number
					return true;
				}
				//split the query string, otherwise it "resolves" when used in the Tygron Platform
				return !(value.indexOf('$') === 0) && (value.indexOf('SELECT_') !== 1);
			}
		};

	}
}

function initCollapsibles() {

	var coll = document.getElementsByClassName("collapsible");
	var i;

	for (i = 0; i < coll.length; i++) {
		coll[i].addEventListener("click", function() {

			this.classList.toggle("active");
			var content = this.nextElementSibling;
							
			if (content.classList.contains("delayed")) {
				if (content.style.maxHeight) {
					content.style.maxHeight = null;
				} else {
					content.style.maxHeight = content.scrollHeight + "px";
				}
			} else {
				if (content.style.display === "block") {
					content.style.display = "none";
				} else {
					content.style.display = "block";
				}
			}


		});
	}
}

function openCollapsibles() {
	var coll = document.getElementsByClassName("collapsible");
	for (i = 0; i < coll.length; i++) {
		const collapsible = coll[i];
		setTimeout(function() {
			collapsible.click();
		}, i * 100);
	}
}
function connector(token, baseUrl, basePath,) {
	
	return {
		token : token ?? null,
		basePath : basePath ?? '/api/session/',
		baseUrl : baseUrl ?? null,
		protocol: 'https',
		
		start(funcToRun) {
			return (typeof funcToRun === 'function') ? Promise.resolve(funcToRun()) : Promise.resolve(funcToRun ?? null);
		},
		
		get(url, queryParams, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'GET', url, queryParams, null, preparationFunction )();
			}
		},
		post(url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				return self._call( 'POST', url, queryParams, params, preparationFunction )();
			}
		},
		
		recalculate( xqueries ) {
			let self = this;
			return function(data) {
				return self.post('/api/session/event/editorindicator/reset_indicators/',null,[!!xqueries])(data);
			}
		},

		consoleLog: function(message) {
			return function(data) {
				if (message) {
					console.log(message);
				}
				console.log(data);
				return data;
			}
		},
		
		_prepareQueryString: function(queryParams, url) {
			queryParams = queryParams ?? {};
			let queryString = new URLSearchParams(queryParams).toString();
			if ( queryString.length > 0 ) {
				if ( url.indexOf('?')===-1 ) {
					queryString = '?'+ queryString;
				} else {
					queryString = '&'+ queryString;
				}
			}
			return queryString;
		},
		
		_prepareQueryParams: function(queryParams) {
			queryParams = queryParams ?? {};
			if ( !(typeof queryParams === 'object') ) {
				queryParams = {};
			}
			return queryParams;
		},
		
		_prepareParams: function(params) {
			params = params ?? [];
			if (!Array.isArray(params)) {
				params = [params];
			}
			return params;
		},
		
		_call: function (method, url, queryParams, params, preparationFunction) {
			let self = this;
			return function(data) {
				params = method.toUpperCase() == 'GET' ? null : self._prepareParams(params);
				queryParams = self._prepareQueryParams(queryParams);
				queryParams['token'] = queryParams['token'] ?? self.token;
				queryParams['f'] = queryParams['f'] ?? 'JSON';
				
				if (typeof preparationFunction == 'function') {
					url = preparationFunction(data, url, queryParams, params) ?? url;
				}
				
				let queryString = self._prepareQueryString(queryParams, url);
				if ( self.basePath && !(url.indexOf('/')==0) ) {
					url = self.basePath + url;
				}
				if (self.baseUrl) {
					url = self.protocol + self.baseUrl + url;
				}
				url = url + queryString;
				
				let promise = Promise.resolve(
					$.ajax({
						url: url,
						method: method.toUpperCase(),
						contentType: 'application/json',
						dataType: 'json',
						data: JSON.stringify(params),
					})
				);
				return promise;
			};
		},

		//To use a single argument which is an array itself, wrap the arguments in an array.
		chain: function(func, args) {
			if ( typeof args === 'undefined' ) {
				return function(data) {
					return func(data);
				}
			}
			if ( Array.isArray(args) ) {
				return function(data) {
					return func.apply(this, args.slice().unshift(data));
				}
			}
			return function(data) {
				return func.apply(this, [data, args]);
			}
		},
	};
}

/**
 * @param {Array.<string>} properties Array of Property names to set into data
 * @returns {Object} Data Object containing the properties.
 */
function createLinks(properties) {
	
	return { properties: properties };
}

/**
 * @param {Object} data object with String properties, initialized using createLinks method 
 * @param {int} timeframe timeframe index at which the link should be 
 * @return {Object} containing a source, target and value array properties.
 */
function getLink(data, timeframe) {
	
	if (!Array.isArray(data.timeframeLinks)) {
		data.timeframeLinks = [];
	}
	
	while (data.timeframeLinks.length - 1 < timeframe) {
		data.timeframeLinks.push({
			source: [],
			target: [],
			value: [],
		});
	}
	
	return data.timeframeLinks[timeframe];
}

/**
 * @param {Object} data object with String properties, initialized using createLinks method 
 * @param {int} timeframe timeframe index at which the link should be set
 * @param {String} from the property from which an ammount is removed.
 * @param {String} to the property to which an amount is added.
 * @param {Number} amount that is moved between the two properties
 */
function addLink(data, timeframe, from, to, amount) {
	
	let link = getLink(data, timeframe)
	if (!Array.isArray(link.source)) {
		link.source = [];
	}
	if (!Array.isArray(link.target)) {
		link.target = [];
	}
	if (!Array.isArray(link.value)) {
		link.value = [];
	}
	
	link.source.push(data.properties.indexOf(from));
	link.target.push(data.properties.indexOf(to));
	link.value.push(amount);
}


function createTimeframeData(timeframes, itemID, properties) {
	
	let data = {
		itemID: itemID,
		timeframes: timeframes
	};
	
	for (let i = 0; i < properties.length; i++) {
		data[properties[i]] = [];
		for (let j = 0; j < timeframes; j++) {
			data[properties[i]].push(0);
		}
	}
	
	return data;
}

/**
 * @param {*} data Data object
 * @param {*} property Property name to set into data
 * @param {*} values Value array to set under property name into data
 * @param {{}} [args={}] Additional args object, supports .relative and .negative with boolean value
 */
function setTimeframeValues(data, property, values, args = {}) {

	for (let i = 0; i < data[property].length && i < values.length; i++) {
		data[property][i] = values[i];
	}

	if (args.relative) {

		for (let i = 0; i < data[property].length; i++) {
			let previous = i == 0 ? 0 : data[property][i - 1];
			data[property][i] -= previous;
		}
	}
	if (args.negative !== undefined) {
		if (args.negative) {
			for (let i = 0; i < data[property].length; i++) {
				data[property][i] = Math.abs(Math.min(0, data[property][i]));
			}
		} else {
			for (let i = 0; i < data[property].length; i++) {
				data[property][i] = Math.max(0, data[property][i]);
			}
		}
	}
}

function setTimeframeValue(data, property, value) {

	for (let i = 0; i < data.dataframes.length; i++) {
		data[property][i] = value;
	}
}

function addFlowValues(data, timeframe, propertyFrom, propertyTo, areaIDFrom, areaIDTo, values, condition = undefined) {
	addFlowValuesWithInner(data, timeframe, propertyFrom, propertyTo, undefined, areaIDFrom, areaIDTo, values, condition);
}

function addFlowValuesWithInner(data, timeframe, propertyFrom, propertyTo, propertyInner, areaIDFrom, areaIDTo, values, condition = undefined) {
	
	if (data[propertyFrom][timeframe] == undefined) {
		data[propertyFrom][timeframe] = 0;
	}
	
	if (data[propertyTo][timeframe] == undefined) {
		data[propertyTo][timeframe] = 0;
	}
	
	if (propertyInner != undefined) {
		if (data[propertyInner][timeframe] == undefined) {
			data[propertyInner][timeframe] = 0;
		}
	}
	
	for (let i = 0; i < values.length && i < areaIDFrom.length && i < areaIDTo.length; i++) {
		if ((areaIDTo[i] == data.itemID) && (areaIDFrom[i] == data.itemID) && (condition == undefined || condition[i])) {
			if (propertyInner != undefined) {
				if (values[i] > 0) {
					data[propertyInner][timeframe] += values[i];
				} else {
					data[propertyInner][timeframe] -= values[i];
				}
			}
		} else if (areaIDTo[i] == data.itemID && (condition == undefined || condition[i])) {
			
			if (values[i] > 0) {
				data[propertyFrom][timeframe] += values[i];
			
			} else {
				data[propertyTo][timeframe] -= values[i];
			}
		
		} else if (areaIDFrom[i] == data.itemID && (condition == undefined || condition[i])) {
			
			if (values[i] > 0) {
				data[propertyTo][timeframe] += values[i];
			
			} else {
				data[propertyFrom][timeframe] -= values[i];
			}
		}
	}
}

function addValuesForTimeframeAndID(data, timeframe, property, idValues, values) {

	if (idValues[i] == data.itemID) {
		if (data[property][timeframe] == undefined) {
			data[property][timeframe] = 0;
		}
		data[property][timeframe] += values[i];
	}

}
function ensureDomElement(domElementId) {
	let domElement = domElementId;
	if (!(domElement instanceof HTMLElement)) {
		domElement = document.getElementById(domElementId);
	}
	if (!(domElement instanceof HTMLElement)) {
		throw 'No element found matching ' + domElementId;
	}
	return domElement;
}

function attachHandler(parentElement, eventType, selector, handler, referenceClass) {
	let checkHandler = function(event) {
		event = event || window.event;
		event.target = event.target || event.srcElement;

		let foundElement = selector ? event.target.closest(selector) : parentElement;
		if (foundElement) {
			handler.call(foundElement, event);
		}
	};

	if (parentElement.addEventListener) {
		parentElement.addEventListener(eventType, checkHandler, false);
	}
	if (referenceClass) {
		parentElement.classList.add(referenceClass);
	}
}

function popupPanel(element, id, webPath) {

	let popupPanel = document.createElement('div');
	popupPanel.classList.add('popup');

	let panelCloser = document.createElement('div');
	panelCloser.classList.add('closer');
	attachHandler(panelCloser, 'click', null, function() { clearPopupPanel(element); });

	let panelFrame = document.createElement('iframe');
	panelFrame.classList.add('popupFrame');

	popupPanel.appendChild(panelCloser);
	popupPanel.appendChild(panelFrame);

	webPath = webPath ?? '/web/panel.html';
	let queryString = 'token=$TOKEN&id=' + id;
	let webTarget = webPath + (webPath.indexOf('?') < 0 ? '?' : '&') + queryString;
	panelFrame.src = webTarget;

	clearPopupPanel(element);
	element.appendChild(popupPanel);
}
function clearPopupPanel(element) {
	let popups = element.getElementsByClassName('popup');
	for (let i = 0; i < popups.length; i++) {
		popups[i].remove();
	}
	return element;
}

function addDownloadHandler(element, fileName, contentFunction) {
	element.addEventListener('click', () => {
		let content = contentFunction();
		let blob = new Blob([content], { type: 'text/plain' });

		// temp link 
		const link = document.createElement('a');
		link.href = URL.createObjectURL(blob);
		link.download = fileName;
		link.click();

		// cleanup
		URL.revokeObjectURL(link.href);
	});
}

function toCSVContent(data, properties, titles, timeframes) {
	
	let csvContent = "data:text/csv;charset=utf-8,";

	for (let i = 0; i < properties.length; i++) {
		csvContent += titles[properties[i]];
		csvContent += i < properties.length - 1 ? "," : "\r\n";
	}
	
	for (let t = 0; t < timeframes; t++) {
		for (let i = 0; i < properties.length; i++) {
			csvContent += data[properties[i]][t];
			csvContent += i < properties.length - 1 ? "," : "\r\n";
		}
	}

	return csvContent;

}

function barPlot(plotDivName, data, timeframe, properties, colors, titles, layout) {


	
	var bardata = [];

	for (let i = 1; i < properties.length; i++) {
		let trace = 		{
				x: [],
				y: [],
				marker: {
					color: []
				},
				name: [], 
				type: 'bar'
			}
			
		let property = properties[i];
		trace.x.push(titles[property]);
		trace.y.push(data[property][timeframe]);
		trace.marker.color.push("rgba(" + colors[property].join(",") + ")");
		trace.name = titles[property];
		bardata.push(trace);
	}

	
	
	var layout = {
			  showlegend: true,	 
			  }; 

	Plotly.newPlot(plotDivName, bardata, layout);
}

function volumeStackedPlot(plotDivName, data, properties, colors, titles, layout, percentual = false) {

	var traces = [];
	for (let i = 1; i < properties.length; i++) {
		series = {};

		series.x = [];
		series.y = [];

		if (titles != null && titles[properties[i]] != null) {
			series.name = titles[properties[i]];
		}
		series.stackgroup = 'one';
		if (percentual) {
			series.groupnorm = 'percent';
		}
		series.fillcolor = "rgba(" + colors[properties[i]].join(",") + ")";

		for (let t = 0; t < data[properties[i]].length; t++) {
			series.x.push(data[properties[0]][t]);
			series.y.push(data[properties[i]][t]);
		}

		traces.push(series);
	}

	if (layout == undefined) {
		layout = {};
	}
	if (layout.title == undefined) {
		layout.title = {
			text: percentual ? 'Percentual Volume Stack' : 'Volume Stack'
		}
	}

	Plotly.newPlot(plotDivName, traces, layout)
}





function sankeyPlot(
  plotDivName,
  links,
  timeframe,
  properties,
  titles,
  layout,
  colors = null,
  positionsX = null,
  positionsY = null
) {

	let link = getLink(links, timeframe);
	
	//labels bepalen
	labels = [];
	for (var i = 0; i < properties.length; i++) {
		labels.push(titles[properties[i]]);
	}
	
	let node = {
			pad: 15,
			thickness: 20,
			line: { color: "black", width: 0.5 },
			label: labels,
			align: "right"
		};
		
	// Voeg optionele kleuren toe
	if (colors !== null) {
		node.color = properties.map(p => colors[p]);
			}
			
			// Voeg optionele posities toe
			  if (positionsX !== null && positionsY !== null) {
			    node.x = properties.map(p => positionsX[p]);
			    node.y = properties.map(p => positionsY[p]);
			  }
	
			// Maak het Sankey data object
				let data = {
					type: "sankey",
					orientation: "h",
					node: node,
					link: link
				};
				


	Plotly.newPlot(plotDivName, [data], layout);
}

function createRadarPlot(plotDivName, labels, values, range, layout) {
	if (Array.isArray(values)) {
		console.error('Array provided for Radarplot rather than mapping. Placing values in mapping under key "Values".');
		values = { 'Values' : values };
	}
	let plotLabels = labels.slice(0, labels.length);
	plotLabels.push(labels[0]);
	
	let plotData = [];
	for ( let i in values ) {
		let plotValues = [];
		for (let l=0;l<labels.length;l++) {
				plotValues[l] = values[i][l] ?? 0;
		}
		plotValues.push(plotValues[0]);
		plotData.push({
			type: 'scatterpolar',
			r: plotValues,
			theta: plotLabels,
			fill: 'toself',
			name: i,
			showlegend: true,
		});
	}

	let plotLayout = JSON.parse(JSON.stringify(layout)); //deep copy
	plotLayout['polar'] ??= {
		radialaxis: {
		  visible: true,
		  direction: 'clockwise',
		  range: [Math.min.apply(null,range),Math.max.apply(null,range)]
		},
		angularaxis: {
		  direction: 'clockwise'
		},
	  };

	Plotly.newPlot(plotDivName, plotData, plotLayout);
	
}

function createLayout() {
	/**
	 * See https://plotly.com/javascript/reference/layout/
	 */

	const layout = {
		title: {
			automargin: undefined,
			font: undefined, /*{color, family, lineposition,shadow, size style, textcase, variant, weight}*/
			pad: undefined,  /*b, l ,r ,t*/
			subtitle: undefined, /*{
						font: undefined, 
						text: undefined		
						x: undefined,
						xanchor: undefined,
						xref: undefined,
						y: undefined, 
						yanchor: undefined, 
						yref: undefined,}*/

			text: undefined,
			x: undefined,
			xanchor: undefined,
			xref: undefined,
			y: undefined,
			yanchor: undefined,
			yref: undefined,
		},
		showLegend: undefined,

		legend: {
			bgcolor: undefined,
			bordercolor: undefined,
			borderwidth: undefined,
			entrywidth: undefined,
			entrywidthmode: undefined,
			font: undefined,
			groupclick: undefined,
			grouptitlefont: undefined,
			indentation: undefined,
			itemclick: undefined,
			itemdoubleclick: undefined,
			itemsizing: undefined,
		}, //etc

		xaxis: {

			title: {

				text: '',

				font: {

				}

			},

		},

		yaxis: {

			title: {

				text: '',

				font: {

				}

			}

		}
	};
	return layout;
}

function createVolumePlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createBarPlotLayout(title) {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	layout.title.text = title;
	return layout;
}

function createSankeyPlotLayout() {
	const layout = createLayout();
	/**
	 * Override specific settings
	 */
	return layout;
}

function createRadarPlotLayout() {
	const layout = createLayout();
	layout['legend'] ??= {};
	layout['margin'] ??= {};
	
	Object.assign(layout['margin'], {
		t:32,
		b:32,
		l:48,
		r:48,
		pad:0,
		autoexpand:true,
	});
	layout['showlegend'] ??= true;
	layout['autosize'] ??= true;

	return layout;
}


function getRGBAInterpolated(value, min, max, maxColor, baseColor) {

	if (baseColor == undefined) {
		baseColor = [255, 255, 255, 0.0]
	}

	let fraction = (value - min) / (max - min);
	let red = Math.round(maxColor[0] * fraction + (1 - fraction) * baseColor[0]);
	let green = Math.round(maxColor[1] * fraction + (1 - fraction) * baseColor[1]);
	let blue = Math.round(maxColor[2] * fraction + (1 - fraction) * baseColor[2]);
	let alpha = maxColor[3] * fraction;

	return "rgba(" + [red, green, blue, alpha].join(",") + ")";
}


function createTable(divName, data, properties, colors, titles, timeLabels) {

	let table = document.getElementById(divName);
	if (table == undefined) {
		console.log("Element with id: " + divName + " does not exist.");
		return;
	}

	var header = table.createTHead();
	let trow = header.insertRow(-1);
	for (let n = 0; n < properties.length; n++) {
		let cell = trow.insertCell(-1);
		cell.innerHTML = titles[properties[n]];
	}

	var tableBody = table.createTBody();
	for (let r = 0; r < timeframes; r++) {
		var row = tableBody.insertRow(-1);
		for (let n = 0; n < properties.length; n++) {
			let cell = row.insertCell(-1);

			let labelDiv = document.createElement('div');
			let label = document.createElement('label');

			if (n === 1 && timeLabels) {
				// Gebruik de tijdstring uit de array
				label.innerHTML = timeLabels[r];
			} else {
				let value = data[properties[n]][r];
				let min = Math.min.apply(Math, data[properties[n]]);
				let max = Math.max.apply(Math, data[properties[n]]);
				let color = colors[properties[n]];

				// Afronding
				if (typeof value == 'undefined') {
					label.innerHTML = '-';
				} else if (n === 0) {
					label.innerHTML = value.toFixed();
				} else {
					label.innerHTML = value.toFixed(2);
				}

				if (min === max || color === undefined) {
					labelDiv.style.backgroundColor = 'transparent';
				} else {
					labelDiv.style.backgroundColor = getRGBAInterpolated(value, min, max, color);
				}
			}

			labelDiv.appendChild(label);
			cell.appendChild(labelDiv);
		}
	}
}


function setupTimeframeSlider(timeframeSlider, timeframe, timeframes, onInput){
	timeframeSlider.max = timeframes - 1;
	timeframeSlider.value = timeframe;
	if (timeframeSlider.parentElement != null) {
		timeframeSlider.parentElement.style.setProperty('--max', timeframeSlider.max);
		timeframeSlider.parentElement.style.setProperty('--min', 0);
		timeframeSlider.parentElement.style.setProperty('--step', 1); /*Compute*/
		timeframeSlider.parentElement.style.setProperty('--tickEvery', 1);
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
		

	}
	timeframeSlider.oninput = function() {
		onInput();
		timeframeSlider.parentElement.style.setProperty('--value',timeframeSlider.value); 
		timeframeSlider.parentElement.style.setProperty('--text-value', JSON.stringify(timeframeSlider.value))	
	};
}


$(window).on("load", function() {

	let indicatorNames = '$SELECT_NAME_WHERE_INDICATOR_IS_X'.replaceAll('"', '').split(', ');
	let indicatorActive = [$SELECT_ACTIVE_WHERE_INDICATOR_IS_X];
	let indicatorScores = {};
	indicatorScores['Current'] = [$SELECT_SCORE_WHERE_INDICATOR_IS_X_AND_MAP_IS_CURRENT];
	indicatorScores['Maquette'] = [$SELECT_SCORE_WHERE_INDICATOR_IS_X_AND_MAP_IS_MAQUETTE];
	if (JSON.stringify(indicatorScores['Current']) == JSON.stringify(indicatorScores['Maquette'])) {
		indicatorScores = { 'Score': indicatorScores['Maquette'] };
	}

	let options = [0, 100];

	let labels = [];
	let values = {};

	for (let key in indicatorScores) {
		values[key] = [];
	}

	for (let i = 0; i < indicatorActive.length; i++) {
		if (indicatorActive[i] > 0) {
			labels.push(indicatorNames[i]);
			for (let key in indicatorScores) {
				let newValue = indicatorScores[key][i] * 100;
				values[key].push(newValue);
			}
		}
	}
	let layout = createRadarPlotLayout();
	createRadarPlot('chart', labels, values, options, layout);
});

	</script>
